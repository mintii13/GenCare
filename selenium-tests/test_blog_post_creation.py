#!/usr/bin/env python3
"""
Blog Post Creation Test
Test complete blog posting functionality with consultant role
"""

import sys
import os
import time
import random

# Add the current directory to the Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from pages.base_page import BasePage
from pages.blog_page_new import BlogPageNew
from utils.driver_manager import get_driver_manager
from utils.logger import get_logger

def test_blog_post_creation():
    """Test complete blog post creation workflow"""
    logger = get_logger("BlogPostCreationTest")
    logger.info("üß™ Starting blog post creation test")
    
    # Get driver
    driver_manager = get_driver_manager()
    driver = driver_manager.get_driver()
    
    try:
        # Initialize page objects
        base_page = BasePage(driver)
        blog_page = BlogPageNew(driver)
        
        # Generate unique test data
        timestamp = int(time.time())
        test_title = f"Test Blog Post - {timestamp}"
        test_content = f"""
ƒê√¢y l√† b√†i vi·∫øt test ƒë∆∞·ª£c t·∫°o b·ªüi automated test v√†o l√∫c {time.strftime('%Y-%m-%d %H:%M:%S')}.

N·ªôi dung b√†i vi·∫øt:
- ƒê√¢y l√† test automation cho ch·ª©c nƒÉng t·∫°o blog
- B√†i vi·∫øt n√†y ƒë∆∞·ª£c t·∫°o b·ªüi consultant role
- Timestamp: {timestamp}

M·ª•c ƒë√≠ch test:
1. Ki·ªÉm tra kh·∫£ nƒÉng ƒëƒÉng nh·∫≠p c·ªßa consultant
2. Ki·ªÉm tra kh·∫£ nƒÉng t·∫°o b√†i vi·∫øt m·ªõi
3. Ki·ªÉm tra form validation
4. Ki·ªÉm tra vi·ªác l∆∞u v√† hi·ªÉn th·ªã b√†i vi·∫øt

Test completed successfully if you can see this post!
        """.strip()
        
        logger.info(f"üìù Test data prepared:")
        logger.info(f"   Title: {test_title}")
        logger.info(f"   Content length: {len(test_content)} characters")
        
        # Step 1: Login as consultant
        logger.info("üîë Step 1: Logging in as consultant")
        
        # Navigate to homepage
        base_page.navigate_to("/")
        base_page.wait_for_page_load()
        
        # Click login button
        login_clicked = base_page.click_element(
            ("xpath", "//button[contains(text(), 'ƒêƒÉng nh·∫≠p')]")
        )
        
        if not login_clicked:
            logger.error("‚ùå Could not click login button")
            return False
        
        time.sleep(2)
        
        # Fill consultant credentials
        email_filled = base_page.type_text(
            ("name", "email"), 
            "consultant1@gencare.com"
        )
        
        password_filled = base_page.type_text(
            ("name", "password"), 
            "password"
        )
        
        if not email_filled or not password_filled:
            logger.error("‚ùå Could not fill login credentials")
            return False
        
        # Submit login
        submit_clicked = base_page.click_element(
            ("xpath", "//button[@type='submit']")
        )
        
        if not submit_clicked:
            logger.error("‚ùå Could not submit login form")
            return False
        
        # Wait for login to complete
        time.sleep(5)
        
        current_url = base_page.get_current_url()
        logger.info(f"üìç After login URL: {current_url}")
        
        # Verify login successful
        if "/consultant" not in current_url:
            page_source = base_page.driver.page_source.lower()
            if "consultant" not in page_source and "dashboard" not in page_source:
                logger.error(f"‚ùå Consultant login failed. Current URL: {current_url}")
                return False
        
        logger.info("‚úÖ Consultant login successful")
        
        # Step 2: Navigate to blogs page
        logger.info("üìù Step 2: Navigating to blogs page")
        
        blog_navigation = blog_page.navigate_to_blog_list()
        if not blog_navigation:
            logger.error("‚ùå Could not navigate to blogs page")
            return False
        
        time.sleep(3)
        logger.info("‚úÖ Successfully navigated to blogs page")
        
        # Step 3: Click create button
        logger.info("‚ûï Step 3: Clicking create blog button")
        
        create_button_clicked = base_page.click_element(
            ("xpath", "//button[contains(text(), 'Vi·∫øt')]")
        )
        
        if not create_button_clicked:
            logger.error("‚ùå Could not click create blog button")
            return False
        
        time.sleep(3)
        
        # Verify we're on creation page
        current_url = base_page.get_current_url()
        if "create" not in current_url:
            logger.error(f"‚ùå Not on creation page. Current URL: {current_url}")
            return False
        
        logger.info(f"‚úÖ Successfully navigated to creation page: {current_url}")
        
        # Step 4: Fill blog form
        logger.info("‚úçÔ∏è Step 4: Filling blog creation form")
        
        # Fill title
        title_filled = base_page.type_text(
            ("css selector", "input[placeholder*='ti√™u ƒë·ªÅ']"),
            test_title
        )
        
        if not title_filled:
            # Try alternative selectors
            title_selectors = [
                ("name", "title"),
                ("xpath", "//input[@type='text']"),
                ("css selector", "input[type='text']")
            ]
            
            for selector in title_selectors:
                try:
                    if base_page.is_element_visible(selector, timeout=2):
                        title_filled = base_page.type_text(selector, test_title)
                        if title_filled:
                            logger.info(f"‚úÖ Title filled with selector: {selector}")
                            break
                except:
                    continue
        
        if not title_filled:
            logger.error("‚ùå Could not fill title field")
            return False
        
        logger.info("‚úÖ Title field filled successfully")
        
        # Fill content
        content_filled = False
        content_selectors = [
            ("name", "content"),
            ("css selector", "textarea"),
            ("xpath", "//textarea"),
            ("css selector", "[contenteditable='true']"),
            ("css selector", ".editor, .content-editor")
        ]
        
        for selector in content_selectors:
            try:
                if base_page.is_element_visible(selector, timeout=2):
                    content_filled = base_page.type_text(selector, test_content)
                    if content_filled:
                        logger.info(f"‚úÖ Content filled with selector: {selector}")
                        break
            except:
                continue
        
        if not content_filled:
            logger.warning("‚ö†Ô∏è Could not fill content field - may not be required or different selector needed")
            # Continue test as content might be optional or use rich text editor
        
        # Step 5: Submit the form
        logger.info("üì§ Step 5: Submitting blog post")
        
        # Take screenshot before submission
        base_page.take_screenshot("_before_blog_submit")
        
        # Submit the form
        submit_clicked = base_page.click_element(
            ("xpath", "//button[@type='submit']")
        )
        
        if not submit_clicked:
            # Try alternative submit selectors
            submit_selectors = [
                ("xpath", "//button[contains(text(), 'ƒêƒÉng')]"),
                ("xpath", "//button[contains(text(), 'T·∫°o')]"),
                ("xpath", "//button[contains(text(), 'L∆∞u')]"),
                ("xpath", "//button[contains(text(), 'Xu·∫•t b·∫£n')]"),
                ("css selector", "button[type='submit']"),
                ("css selector", ".submit-button, .publish-button")
            ]
            
            for selector in submit_selectors:
                try:
                    if base_page.is_element_visible(selector, timeout=2):
                        submit_clicked = base_page.click_element(selector)
                        if submit_clicked:
                            logger.info(f"‚úÖ Submit clicked with selector: {selector}")
                            break
                except:
                    continue
        
        if not submit_clicked:
            logger.error("‚ùå Could not submit blog form")
            return False
        
        logger.info("‚úÖ Blog form submitted")
        
        # Step 6: Wait for response and verify
        logger.info("‚è≥ Step 6: Waiting for submission response")
        
        time.sleep(5)
        
        current_url = base_page.get_current_url()
        logger.info(f"üìç After submission URL: {current_url}")
        
        # Check for success indicators
        success_indicators = [
            "blog ƒë√£ ƒë∆∞·ª£c t·∫°o",
            "th√†nh c√¥ng",
            "success",
            "ƒëƒÉng th√†nh c√¥ng",
            "t·∫°o th√†nh c√¥ng"
        ]
        
        page_source = base_page.driver.page_source.lower()
        success_found = False
        
        for indicator in success_indicators:
            if indicator in page_source:
                success_found = True
                logger.info(f"‚úÖ Success indicator found: '{indicator}'")
                break
        
        # Check if redirected to blog list or blog detail
        if "/blogs" in current_url and "create" not in current_url:
            logger.info("‚úÖ Redirected to blogs page - likely successful")
            success_found = True
        
        # Step 7: Verify blog appears in list
        logger.info("üîç Step 7: Verifying blog appears in list")
        
        # Navigate to blog list if not already there
        if "create" in current_url:
            blog_page.navigate_to_blog_list()
            time.sleep(3)
        
        # Look for our blog title in the page
        if test_title in base_page.driver.page_source:
            logger.info("‚úÖ Blog title found in blog list!")
            success_found = True
        else:
            logger.warning("‚ö†Ô∏è Blog title not immediately visible in list")
            
            # Check if we need to scroll or load more
            try:
                # Scroll down to load more blogs
                base_page.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                time.sleep(2)
                
                if test_title in base_page.driver.page_source:
                    logger.info("‚úÖ Blog title found after scrolling!")
                    success_found = True
            except:
                pass
        
        # Take final screenshot
        base_page.take_screenshot("_after_blog_creation")
        
        # Summary
        logger.info("\n" + "="*60)
        logger.info("üìä BLOG POST CREATION TEST SUMMARY")
        logger.info("="*60)
        logger.info(f"üìù Blog Title: {test_title}")
        logger.info(f"‚úÖ Consultant Login: Success")
        logger.info(f"‚úÖ Navigation to Creation Page: Success")
        logger.info(f"‚úÖ Form Filling: Title={title_filled}, Content={content_filled}")
        logger.info(f"‚úÖ Form Submission: {submit_clicked}")
        logger.info(f"{'‚úÖ' if success_found else '‚ùå'} Blog Creation Success: {success_found}")
        
        if success_found:
            logger.info("üéâ BLOG POST CREATION TEST: PASSED")
            logger.info(f"üîó Final URL: {current_url}")
        else:
            logger.warning("‚ö†Ô∏è BLOG POST CREATION TEST: UNCLEAR RESULT")
            logger.info("   Form was submitted but success confirmation unclear")
        
        return success_found
        
    except Exception as e:
        logger.error(f"‚ùå Test failed with exception: {e}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        return False
        
    finally:
        # Cleanup
        try:
            driver.quit()
            logger.info("üßπ Driver cleanup completed")
        except:
            pass

if __name__ == "__main__":
    success = test_blog_post_creation()
    exit(0 if success else 1) 