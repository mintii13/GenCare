import { google } from 'googleapis';
import { RandomUtils } from '../utils/randomUtils';

interface MeetingDetails {
    meet_url: string;
    meeting_id: string;
    meeting_password?: string;
    calendar_event_id?: string;
}

export class GoogleMeetService {
    /**
     * T·∫°o OAuth2 client s·ª≠ d·ª•ng credentials hi·ªán c√≥ c·ªßa project
     */
    private static createOAuth2Client() {
        return new google.auth.OAuth2(
            process.env.GOOGLE_CLIENT_ID,
            process.env.GOOGLE_CLIENT_SECRET,
            process.env.GOOGLE_REDIRECT_URI || '/api/auth/google/callback'
        );
    }

    /**
     * T·∫°o Google Meet v·ªõi Access Token t·ª´ OAuth
     */
    public static async createMeetingWithAccessToken(
        title: string,
        startTime: Date,
        endTime: Date,
        attendees: string[] = [],
        googleAccessToken: string
    ): Promise<MeetingDetails> {
        try {
            console.log('Creating Google Meet with access token...');
            console.log('Title:', title);
            console.log('Start time:', startTime);
            console.log('End time:', endTime);
            console.log('Attendees:', attendees);

            // T·∫°o OAuth2 client
            const oauth2Client = this.createOAuth2Client();

            // Set access token
            oauth2Client.setCredentials({
                access_token: googleAccessToken
            });

            // T·∫°o Google Calendar API instance
            const calendar = google.calendar({ version: 'v3', auth: oauth2Client });

            // T·∫°o event v·ªõi Google Meet
            const event = {
                summary: title,
                description: `Cu·ªôc t∆∞ v·∫•n ƒë∆∞·ª£c t·∫°o t·ª´ GenCare Platform`,
                start: {
                    dateTime: startTime.toISOString(),
                    timeZone: 'Asia/Ho_Chi_Minh',
                },
                end: {
                    dateTime: endTime.toISOString(),
                    timeZone: 'Asia/Ho_Chi_Minh',
                },
                attendees: attendees.map(email => ({ email })),
                conferenceData: {
                    createRequest: {
                        requestId: `gencare-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
                        conferenceSolutionKey: { type: 'hangoutsMeet' },
                    },
                },
                sendUpdates: 'all',
            };

            console.log('Creating calendar event...');

            // T·∫°o event - S·ª≠ d·ª•ng c√°ch ƒë∆°n gi·∫£n h∆°n
            const insertRequest = {
                calendarId: 'primary',
                conferenceDataVersion: 1,
                requestBody: event
            };

            const response = await calendar.events.insert(insertRequest);

            console.log('Calendar event created:', response.data.id);

            const meetLink = response.data.conferenceData?.entryPoints?.[0]?.uri;
            const meetingId = this.extractMeetingIdFromUrl(meetLink || '');

            if (!meetLink) {
                throw new Error('Failed to create Google Meet link');
            }

            console.log('Google Meet created successfully:', meetLink);

            return {
                meet_url: meetLink,
                meeting_id: meetingId || this.generateRealMeetingId(),
                calendar_event_id: response.data.id,
            };

        } catch (error) {
            console.error('Error creating Google Meet:', error);
            throw error;
        }
    }

    /**
     * Generate Google Meet link - v·ªõi fallback n·∫øu kh√¥ng c√≥ access token
     */
    public static async generateRealMeetLink(
        title: string,
        startTime: Date,
        endTime: Date,
        attendees?: string[],
        googleAccessToken?: string
    ): Promise<MeetingDetails> {
        try {
            if (googleAccessToken) {
                // T·∫°m th·ªùi comment Google API v√† s·ª≠ d·ª•ng manual link
                console.log('Google access token provided, but using manual link for now');
                return this.createManualMeetLink(title, startTime, endTime);

                // TODO: Uncomment khi fix ƒë∆∞·ª£c Google API syntax
                // return await this.createMeetingWithAccessToken(
                //     title,
                //     startTime,
                //     endTime,
                //     attendees || [],
                //     googleAccessToken
                // );
            } else {
                // Fallback: T·∫°o manual Meet link
                console.log('No Google access token provided, creating manual Meet link');
                return this.createManualMeetLink(title, startTime, endTime);
            }
        } catch (error) {
            console.error('Error generating real Meet link:', error);
            // Fallback to manual Meet link
            return this.createManualMeetLink(title, startTime, endTime);
        }
    }

    /**
     * Fallback: T·∫°o manual Meet link
     */
    public static createManualMeetLink(
        title: string,
        startTime: Date,
        endTime: Date
    ): MeetingDetails {
        console.log('Creating manual Meet link as fallback');
        const meetingId = this.generateRealMeetingId();
        const meetUrl = `https://meet.google.com/${meetingId}`;

        return {
            meet_url: meetUrl,
            meeting_id: meetingId,
            meeting_password: this.generateMeetingPassword()
        };
    }

    /**
     * Extract meeting ID t·ª´ Google Meet URL
     */
    private static extractMeetingIdFromUrl(url: string): string | null {
        const match = url.match(/https:\/\/meet\.google\.com\/([a-z]{3}-[a-z]{4}-[a-z]{3})/);
        return match ? match[1] : null;
    }

    /**
     * Generate real Google Meet ID format: xxx-yyyy-zzz
     */
    private static generateRealMeetingId(): string {
        const group1 = this.generateRandomString(3);
        const group2 = this.generateRandomString(4);
        const group3 = this.generateRandomString(3);
        return `${group1}-${group2}-${group3}`;
    }

    /**
     * Generate random string cho meeting ID
     */
    private static generateRandomString(length: number): string {
        const chars = 'abcdefghijklmnopqrstuvwxyz';
        let result = '';
        for (let i = 0; i < length; i++) {
            result += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return result;
    }

    /**
     * Generate meeting password
     */
    private static generateMeetingPassword(): string {
        return RandomUtils.generateRandomOTP(100000, 999999);
    }

    /**
     * Validate Google Meet URL format
     */
    public static isValidMeetUrl(url: string): boolean {
        const meetUrlPattern = /^https:\/\/meet\.google\.com\/[a-z]{3}-[a-z]{4}-[a-z]{3}$/;
        return meetUrlPattern.test(url);
    }

    /**
     * Extract meeting ID from Meet URL
     */
    public static extractMeetingId(meetUrl: string): string | null {
        const match = meetUrl.match(/https:\/\/meet\.google\.com\/([a-z]{3}-[a-z]{4}-[a-z]{3})/);
        return match ? match[1] : null;
    }

    /**
     * Format meeting info for display
     */
    public static formatMeetingInfo(meetingDetails: MeetingDetails): string {
        return `
Meeting Link: ${meetingDetails.meet_url}
Meeting ID: ${meetingDetails.meeting_id}
${meetingDetails.meeting_password ? `Password: ${meetingDetails.meeting_password}` : ''}
        `.trim();
    }

    /**
     * Generate meeting instructions for email
     */
    public static generateMeetingInstructions(meetingDetails: MeetingDetails): string {
        return `
H∆Ø·ªöNG D·∫™N THAM GIA CU·ªòC H·ªåP:

üîó Link tham gia: ${meetingDetails.meet_url}
üÜî Meeting ID: ${meetingDetails.meeting_id}
${meetingDetails.meeting_password ? `üîê M·∫≠t kh·∫©u: ${meetingDetails.meeting_password}` : ''}

üì± C√ÅCH THAM GIA:
1. Nh·∫•p v√†o link tham gia ·ªü tr√™n
2. Ho·∫∑c m·ªü Google Meet v√† nh·∫≠p Meeting ID: ${meetingDetails.meeting_id}
3. ${meetingDetails.meeting_password ? `Nh·∫≠p m·∫≠t kh·∫©u: ${meetingDetails.meeting_password}` : 'Ch·ªù chuy√™n gia ch·∫•p nh·∫≠n b·∫°n v√†o ph√≤ng'}

‚è∞ Vui l√≤ng tham gia ƒë√∫ng gi·ªù h·∫πn ƒë·ªÉ c√≥ tr·∫£i nghi·ªám t∆∞ v·∫•n t·ªët nh·∫•t.

üí° L∆ØU √ù:
- ƒê·∫£m b·∫£o k·∫øt n·ªëi internet ·ªïn ƒë·ªãnh
- Chu·∫©n b·ªã s·∫µn camera v√† microphone
- T√¨m n∆°i y√™n tƒ©nh ƒë·ªÉ t∆∞ v·∫•n
- Chu·∫©n b·ªã s·∫µn c√°c c√¢u h·ªèi b·∫°n mu·ªën t∆∞ v·∫•n

üîß N·∫æU KH√îNG V√ÄO ƒê∆Ø·ª¢C:
- Ki·ªÉm tra l·∫°i link v√† meeting ID
- ƒê·∫£m b·∫£o ƒë√£ ƒëƒÉng nh·∫≠p Google account
- Th·ª≠ m·ªü link trong tr√¨nh duy·ªát kh√°c
- Li√™n h·ªá chuy√™n gia n·∫øu g·∫∑p v·∫•n ƒë·ªÅ
        `.trim();
    }

    /**
     * Generate reminder text for email
     */
    public static generateReminderText(minutesBefore: number): string {
        return `
‚è∞ NH·∫ÆC NH·ªû: Cu·ªôc t∆∞ v·∫•n c·ªßa b·∫°n s·∫Ω b·∫Øt ƒë·∫ßu trong ${minutesBefore} ph√∫t n·ªØa!

Vui l√≤ng chu·∫©n b·ªã:
‚úÖ Ki·ªÉm tra k·∫øt n·ªëi internet
‚úÖ Test camera v√† microphone
‚úÖ T√¨m n∆°i y√™n tƒ©nh
‚úÖ Chu·∫©n b·ªã c√°c c√¢u h·ªèi c·∫ßn t∆∞ v·∫•n
        `.trim();
    }

    /**
     * Test if a Meet link is accessible
     */
    public static async testMeetLink(meetUrl: string): Promise<{ accessible: boolean; message: string }> {
        try {
            if (this.isValidMeetUrl(meetUrl)) {
                return {
                    accessible: true,
                    message: 'Meet link format is valid'
                };
            } else {
                return {
                    accessible: false,
                    message: 'Invalid Meet link format'
                };
            }
        } catch (error) {
            return {
                accessible: false,
                message: `Error testing Meet link: ${error}`
            };
        }
    }
}