import nodemailer from 'nodemailer';
import { GoogleMeetService } from './googleMeetService';

interface AppointmentEmailData {
    customerName: string;
    customerEmail: string;
    consultantName: string;
    appointmentDate: string;
    startTime: string;
    endTime: string;
    meetingInfo?: {
        meet_url: string;
        meeting_id: string;
        meeting_password?: string;
    };
    appointmentId: string;
    customerNotes?: string;
}

export class EmailNotificationService {
    private static getTransporter() {
        return nodemailer.createTransport({
            service: 'gmail',
            auth: {
                user: process.env.EMAIL_FOR_VERIFY || '',
                pass: process.env.EMAIL_APP_PASSWORD || ''
            }
        });
    }

    /**
     * Send appointment confirmation email with meeting link
     */
    public static async sendAppointmentConfirmation(emailData: AppointmentEmailData): Promise<{ success: boolean; message: string }> {
        try {
            if (!emailData.meetingInfo) {
                throw new Error('Meeting information is required for appointment confirmation');
            }

            const transporter = this.getTransporter();
            const meetingInstructions = GoogleMeetService.generateMeetingInstructions(emailData.meetingInfo);

            const mailContent = {
                from: `"GenCare - X√°c nh·∫≠n l·ªãch t∆∞ v·∫•n" <${process.env.EMAIL_FOR_VERIFY}>`,
                to: emailData.customerEmail,
                subject: `‚úÖ L·ªãch t∆∞ v·∫•n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n - ${emailData.appointmentDate} l√∫c ${emailData.startTime}`,
                html: `
                <body style="font-family: Arial, sans-serif; background-color: #f9f9f9; padding: 20px;">
                    <div style="max-width: 600px; margin: auto; background-color: #fff; padding: 30px; border-radius: 8px; box-shadow: 0 0 10px rgba(0,0,0,0.1);">
                        <h2 style="color: #2a9d8f; text-align: center;">üéâ L·ªãch t∆∞ v·∫•n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!</h2>
                        
                        <div style="background-color: #e9f7f5; padding: 20px; border-radius: 8px; margin: 20px 0;">
                            <h3 style="color: #2a9d8f; margin-top: 0;">üìÖ TH√îNG TIN CU·ªòC H·∫∏N</h3>
                            <p><strong>üë©‚Äç‚öïÔ∏è Chuy√™n gia t∆∞ v·∫•n:</strong> ${emailData.consultantName}</p>
                            <p><strong>üìÖ Ng√†y:</strong> ${emailData.appointmentDate}</p>
                            <p><strong>‚è∞ Th·ªùi gian:</strong> ${emailData.startTime} - ${emailData.endTime}</p>
                            <p><strong>üí¨ Ghi ch√∫ c·ªßa b·∫°n:</strong> ${emailData.customerNotes || 'Kh√¥ng c√≥'}</p>
                        </div>

                        <div style="background-color: #fff3cd; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #ffc107;">
                            <h3 style="color: #856404; margin-top: 0;">üé• TH√îNG TIN CU·ªòC H·ªåP ONLINE</h3>
                            <div style="background-color: white; padding: 15px; border-radius: 5px; font-family: monospace;">
                                <p style="margin: 5px 0;"><strong>üîó Link tham gia:</strong></p>
                                <a href="${emailData.meetingInfo.meet_url}" style="color: #1a73e8; text-decoration: none; font-size: 16px; background-color: #f8f9fa; padding: 8px; border-radius: 4px; display: inline-block;">${emailData.meetingInfo.meet_url}</a>
                                
                                <p style="margin: 15px 0 5px 0;"><strong>üÜî Meeting ID:</strong> <span style="background-color: #f8f9fa; padding: 4px 8px; border-radius: 3px;">${emailData.meetingInfo.meeting_id}</span></p>
                                
                                ${emailData.meetingInfo.meeting_password ?
                        `<p style="margin: 5px 0;"><strong>üîê M·∫≠t kh·∫©u:</strong> <span style="background-color: #f8f9fa; padding: 4px 8px; border-radius: 3px;">${emailData.meetingInfo.meeting_password}</span></p>`
                        : ''
                    }
                            </div>
                        </div>

                        <div style="background-color: #d1ecf1; padding: 20px; border-radius: 8px; margin: 20px 0;">
                            <h3 style="color: #0c5460; margin-top: 0;">üì± H∆Ø·ªöNG D·∫™N THAM GIA</h3>
                            <ol style="color: #0c5460;">
                                <li>Nh·∫•p v√†o link tham gia ·ªü tr√™n 5-10 ph√∫t tr∆∞·ªõc gi·ªù h·∫πn</li>
                                <li>Ho·∫∑c m·ªü Google Meet v√† nh·∫≠p Meeting ID</li>
                                <li>${emailData.meetingInfo.meeting_password ? 'Nh·∫≠p m·∫≠t kh·∫©u khi ƒë∆∞·ª£c y√™u c·∫ßu' : 'Ch·ªù chuy√™n gia ch·∫•p nh·∫≠n b·∫°n v√†o ph√≤ng'}</li>
                                <li>ƒê·∫£m b·∫£o camera v√† microphone ho·∫°t ƒë·ªông t·ªët</li>
                            </ol>
                        </div>

                        <div style="background-color: #f8d7da; padding: 15px; border-radius: 8px; margin: 20px 0;">
                            <h4 style="color: #721c24; margin-top: 0;">‚ö†Ô∏è L∆ØU √ù QUAN TR·ªåNG</h4>
                            <ul style="color: #721c24; margin: 0;">
                                <li>Vui l√≤ng tham gia ƒë√∫ng gi·ªù ƒë·ªÉ t·ªëi ∆∞u th·ªùi gian t∆∞ v·∫•n</li>
                                <li>Chu·∫©n b·ªã s·∫µn c√°c c√¢u h·ªèi b·∫°n mu·ªën t∆∞ v·∫•n</li>
                                <li>T√¨m n∆°i y√™n tƒ©nh, tr√°nh ti·∫øng ·ªìn</li>
                                <li>N·∫øu c·∫ßn h·ªßy/thay ƒë·ªïi l·ªãch, vui l√≤ng th√¥ng b√°o tr∆∞·ªõc √≠t nh·∫•t 4 ti·∫øng</li>
                            </ul>
                        </div>

                        <div style="text-align: center; margin: 30px 0;">
                            <a href="${emailData.meetingInfo.meet_url}" style="background-color: #2a9d8f; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-size: 16px; font-weight: bold;">üé• THAM GIA CU·ªòC H·ªåP</a>
                        </div>

                        <hr style="border: none; border-top: 1px solid #eee; margin: 30px 0;">
                        
                        <p style="text-align: center; color: #666; font-size: 14px;">
                            M√£ cu·ªôc h·∫πn: <strong>${emailData.appointmentId}</strong><br>
                            N·∫øu b·∫°n c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i qua email n√†y.
                        </p>
                        
                        <p style="text-align: center; margin-top: 30px;">
                            <strong style="color: #2a9d8f;">${process.env.APP_NAME || 'GenCare'}</strong><br>
                            <em>ChƒÉm s√≥c s·ª©c kh·ªèe sinh s·∫£n to√†n di·ªán</em>
                        </p>
                    </div>
                </body>`
            };

            await transporter.sendMail(mailContent);

            return {
                success: true,
                message: 'Appointment confirmation email sent successfully'
            };
        } catch (error) {
            console.error('Error sending appointment confirmation email:', error);
            return {
                success: false,
                message: `Failed to send confirmation email: ${error.message}`
            };
        }
    }

    /**
     * Send meeting reminder email
     */
    public static async sendMeetingReminder(emailData: AppointmentEmailData, minutesBefore: number = 15): Promise<{ success: boolean; message: string }> {
        try {
            if (!emailData.meetingInfo) {
                throw new Error('Meeting information is required for reminder');
            }

            const transporter = this.getTransporter();
            const reminderText = GoogleMeetService.generateReminderText(minutesBefore);

            const mailContent = {
                from: `"GenCare - Nh·∫Øc nh·ªü cu·ªôc h·∫πn" <${process.env.EMAIL_FOR_VERIFY}>`,
                to: emailData.customerEmail,
                subject: `‚è∞ Nh·∫Øc nh·ªü: Cu·ªôc t∆∞ v·∫•n b·∫Øt ƒë·∫ßu trong ${minutesBefore} ph√∫t - ${emailData.appointmentDate}`,
                html: `
                <body style="font-family: Arial, sans-serif; background-color: #f9f9f9; padding: 20px;">
                    <div style="max-width: 600px; margin: auto; background-color: #fff; padding: 30px; border-radius: 8px; box-shadow: 0 0 10px rgba(0,0,0,0.1);">
                        <h2 style="color: #ff6b35; text-align: center;">‚è∞ NH·∫ÆC NH·ªû CU·ªòC H·∫∏N</h2>
                        
                        <div style="background-color: #fff3cd; padding: 20px; border-radius: 8px; margin: 20px 0; text-align: center; border: 2px solid #ffc107;">
                            <h3 style="color: #856404; margin-top: 0;">Cu·ªôc t∆∞ v·∫•n c·ªßa b·∫°n s·∫Ω b·∫Øt ƒë·∫ßu trong <strong>${minutesBefore} ph√∫t</strong>!</h3>
                            <p style="color: #856404; font-size: 18px;"><strong>${emailData.appointmentDate} l√∫c ${emailData.startTime}</strong></p>
                            <p style="color: #856404;">v·ªõi chuy√™n gia <strong>${emailData.consultantName}</strong></p>
                        </div>

                        <div style="background-color: #d4edda; padding: 20px; border-radius: 8px; margin: 20px 0;">
                            <h3 style="color: #155724; margin-top: 0;">üé• THAM GIA NGAY</h3>
                            <div style="text-align: center; margin: 15px 0;">
                                <a href="${emailData.meetingInfo.meet_url}" style="background-color: #28a745; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-size: 18px; font-weight: bold;">üöÄ THAM GIA CU·ªòC H·ªåP</a>
                            </div>
                            <p style="text-align: center; color: #155724;">
                                <strong>Meeting ID:</strong> ${emailData.meetingInfo.meeting_id}<br>
                                ${emailData.meetingInfo.meeting_password ? `<strong>M·∫≠t kh·∫©u:</strong> ${emailData.meetingInfo.meeting_password}` : ''}
                            </p>
                        </div>

                        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 8px; margin: 20px 0;">
                            <h4 style="color: #495057; margin-top: 0;">‚úÖ CHECKLIST TR∆Ø·ªöC KHI THAM GIA</h4>
                            <ul style="color: #495057;">
                                <li>‚úÖ Ki·ªÉm tra k·∫øt n·ªëi internet</li>
                                <li>‚úÖ Test camera v√† microphone</li>
                                <li>‚úÖ T√¨m n∆°i y√™n tƒ©nh</li>
                                <li>‚úÖ Chu·∫©n b·ªã c√°c c√¢u h·ªèi c·∫ßn t∆∞ v·∫•n</li>
                                <li>‚úÖ ƒê√≥ng c√°c ·ª©ng d·ª•ng kh√¥ng c·∫ßn thi·∫øt</li>
                            </ul>
                        </div>

                        <p style="text-align: center; color: #666; font-style: italic;">
                            N·∫øu b·∫°n g·∫∑p kh√≥ khƒÉn khi tham gia, vui l√≤ng li√™n h·ªá ngay v·ªõi ch√∫ng t√¥i.
                        </p>
                        
                        <p style="text-align: center; margin-top: 30px;">
                            <strong style="color: #2a9d8f;">${process.env.APP_NAME || 'GenCare'}</strong>
                        </p>
                    </div>
                </body>`
            };

            await transporter.sendMail(mailContent);

            return {
                success: true,
                message: 'Meeting reminder email sent successfully'
            };
        } catch (error) {
            console.error('Error sending meeting reminder email:', error);
            return {
                success: false,
                message: `Failed to send reminder email: ${error.message}`
            };
        }
    }

    /**
     * Send appointment cancellation email
     */
    public static async sendAppointmentCancellation(emailData: AppointmentEmailData, cancelledBy: string, reason?: string): Promise<{ success: boolean; message: string }> {
        try {
            const transporter = this.getTransporter();

            const mailContent = {
                from: `"GenCare - H·ªßy l·ªãch h·∫πn" <${process.env.EMAIL_FOR_VERIFY}>`,
                to: emailData.customerEmail,
                subject: `‚ùå L·ªãch t∆∞ v·∫•n ƒë√£ ƒë∆∞·ª£c h·ªßy - ${emailData.appointmentDate} l√∫c ${emailData.startTime}`,
                html: `
                <body style="font-family: Arial, sans-serif; background-color: #f9f9f9; padding: 20px;">
                    <div style="max-width: 600px; margin: auto; background-color: #fff; padding: 30px; border-radius: 8px; box-shadow: 0 0 10px rgba(0,0,0,0.1);">
                        <h2 style="color: #dc3545; text-align: center;">‚ùå L·ªäCH H·∫∏N ƒê√É ƒê∆Ø·ª¢C H·ª¶Y</h2>
                        
                        <div style="background-color: #f8d7da; padding: 20px; border-radius: 8px; margin: 20px 0;">
                            <h3 style="color: #721c24; margin-top: 0;">üìÖ TH√îNG TIN CU·ªòC H·∫∏N ƒê√É H·ª¶Y</h3>
                            <p><strong>üë©‚Äç‚öïÔ∏è Chuy√™n gia:</strong> ${emailData.consultantName}</p>
                            <p><strong>üìÖ Ng√†y:</strong> ${emailData.appointmentDate}</p>
                            <p><strong>‚è∞ Th·ªùi gian:</strong> ${emailData.startTime} - ${emailData.endTime}</p>
                            <p><strong>üôã‚Äç‚ôÇÔ∏è H·ªßy b·ªüi:</strong> ${cancelledBy}</p>
                            ${reason ? `<p><strong>üìù L√Ω do:</strong> ${reason}</p>` : ''}
                        </div>

                        <div style="background-color: #d1ecf1; padding: 20px; border-radius: 8px; margin: 20px 0;">
                            <h3 style="color: #0c5460; margin-top: 0;">üí° B∆Ø·ªöC TI·∫æP THEO</h3>
                            <p style="color: #0c5460;">
                                B·∫°n c√≥ th·ªÉ ƒë·∫∑t l·ªãch t∆∞ v·∫•n m·ªõi b·∫•t c·ª© l√∫c n√†o th√¥ng qua h·ªá th·ªëng c·ªßa ch√∫ng t√¥i. 
                                Ch√∫ng t√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n trong vi·ªác chƒÉm s√≥c s·ª©c kh·ªèe sinh s·∫£n.
                            </p>
                        </div>

                        <div style="text-align: center; margin: 30px 0;">
                            <a href="http://localhost:5173/appointments/book" style="background-color: #2a9d8f; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-size: 16px; font-weight: bold;">üìÖ ƒê·∫∂T L·ªäCH M·ªöI</a>
                        </div>

                        <p style="text-align: center; color: #666; font-size: 14px;">
                            M√£ cu·ªôc h·∫πn: <strong>${emailData.appointmentId}</strong><br>
                            N·∫øu b·∫°n c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i.
                        </p>
                        
                        <p style="text-align: center; margin-top: 30px;">
                            <strong style="color: #2a9d8f;">${process.env.APP_NAME || 'GenCare'}</strong><br>
                            <em>R·∫•t ti·∫øc v√¨ s·ª± b·∫•t ti·ªán n√†y</em>
                        </p>
                    </div>
                </body>`
            };

            await transporter.sendMail(mailContent);

            return {
                success: true,
                message: 'Cancellation email sent successfully'
            };
        } catch (error) {
            console.error('Error sending cancellation email:', error);
            return {
                success: false,
                message: `Failed to send cancellation email: ${error.message}`
            };
        }
    }
}