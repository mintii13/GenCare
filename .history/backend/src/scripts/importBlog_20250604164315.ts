// src/scripts/importBlogs.ts
import { connectDatabase } from '../configs/database';
import { User } from '../models/User';
import { Consultant } from '../models/Consultant';
import { Customer } from '../models/Customer';
import { Blog } from '../models/Blog';
import { BlogComment } from '../models/BlogComment';
import * as fs from 'fs';
import * as path from 'path';

async function importBlogs() {
    try {
        // K·∫øt n·ªëi database
        await connectDatabase();
        console.log('‚úÖ Database connected');

        // ƒê·ªçc file JSON cho Users
        const usersJsonPath = path.join(__dirname, '../../../UsersDB.json');
        const usersData = JSON.parse(fs.readFileSync(usersJsonPath, 'utf-8'));

        // ƒê·ªçc file JSON cho Consultants
        const consultantsJsonPath = path.join(__dirname, '../../../ConsultantsDB.json');
        const consultantsData = JSON.parse(fs.readFileSync(consultantsJsonPath, 'utf-8'));

        // ƒê·ªçc file JSON cho Customers
        const customersJsonPath = path.join(__dirname, '../../../CustomersDB.json');
        const customersData = JSON.parse(fs.readFileSync(customersJsonPath, 'utf-8'));

        // ƒê·ªçc file JSON cho Blogs
        const blogsJsonPath = path.join(__dirname, '../../../BlogsDB.json');
        const blogsData = JSON.parse(fs.readFileSync(blogsJsonPath, 'utf-8'));

        // ƒê·ªçc file JSON cho Blog Comments
        const commentsJsonPath = path.join(__dirname, '../../../BlogCommentsDB.json');
        const commentsData = JSON.parse(fs.readFileSync(commentsJsonPath, 'utf-8'));

        // X√≥a d·ªØ li·ªáu c≈©
        console.log('üóëÔ∏è Clearing old data...');
        await BlogComment.deleteMany({});
        await Blog.deleteMany({});
        await Customer.deleteMany({});
        await Consultant.deleteMany({});
        await User.deleteMany({});

        // Import Users
        console.log('üë• Importing users...');
        for (const userData of usersData) {
            try {
                console.log('ƒêang th√™m user:', userData.email);
                console.log('D·ªØ li·ªáu user:', JSON.stringify(userData, null, 2));

                const user = new User(userData);
                await user.save();
                console.log(`‚úÖ ƒê√£ th√™m user: ${user.email}`);
            } catch (error) {
                console.error(`‚ùå L·ªói khi th√™m user ${userData.email}:`);
                console.error('Chi ti·∫øt l·ªói:', error);
                if (error.code === 11000) {
                    console.error('L·ªói tr√πng l·∫∑p key:', error.keyValue);
                }
            }
        }

        // Import Consultants
        console.log('ü©∫ Importing consultants...');
        for (const consultantData of consultantsData) {
            try {
                console.log('ƒêang th√™m consultant cho user_id:', consultantData.user_id);
                console.log('D·ªØ li·ªáu consultant:', JSON.stringify(consultantData, null, 2));

                const consultant = new Consultant(consultantData);
                await consultant.save();
                console.log(`‚úÖ ƒê√£ th√™m consultant: ${consultant._id}`);
            } catch (error) {
                console.error(`‚ùå L·ªói khi th√™m consultant ${consultantData.user_id}:`);
                console.error('Chi ti·∫øt l·ªói:', error);
                if (error.code === 11000) {
                    console.error('L·ªói tr√πng l·∫∑p key:', error.keyValue);
                }
            }
        }

        // Import Customers
        console.log('üë©‚Äç‚öïÔ∏è Importing customers...');
        for (const customerData of customersData) {
            try {
                console.log('ƒêang th√™m customer cho user_id:', customerData.user_id);
                console.log('D·ªØ li·ªáu customer:', JSON.stringify(customerData, null, 2));

                const customer = new Customer(customerData);
                await customer.save();
                console.log(`‚úÖ ƒê√£ th√™m customer: ${customer._id}`);
            } catch (error) {
                console.error(`‚ùå L·ªói khi th√™m customer ${customerData.user_id}:`);
                console.error('Chi ti·∫øt l·ªói:', error);
                if (error.code === 11000) {
                    console.error('L·ªói tr√πng l·∫∑p key:', error.keyValue);
                }
            }
        }

        // Import Blogs
        console.log('üìù Importing blogs...');
        for (const blogData of blogsData) {
            try {
                console.log('ƒêang th√™m blog:', blogData.title);
                console.log('D·ªØ li·ªáu blog:', JSON.stringify(blogData, null, 2));

                const blog = new Blog(blogData);
                await blog.save();
                console.log(`‚úÖ ƒê√£ th√™m blog: ${blog.title}`);
            } catch (error) {
                console.error(`‚ùå L·ªói khi th√™m blog ${blogData.title}:`);
                console.error('Chi ti·∫øt l·ªói:', error);
                if (error.code === 11000) {
                    console.error('L·ªói tr√πng l·∫∑p key:', error.keyValue);
                }
            }
        }

        // Import Blog Comments
        console.log('üí¨ Importing blog comments...');
        for (const commentData of commentsData) {
            try {
                console.log('ƒêang th√™m comment cho blog_id:', commentData.blog_id);
                console.log('D·ªØ li·ªáu comment:', JSON.stringify(commentData, null, 2));

                const comment = new BlogComment(commentData);
                await comment.save();
                console.log(`‚úÖ ƒê√£ th√™m comment: ${comment._id}`);
            } catch (error) {
                console.error(`‚ùå L·ªói khi th√™m comment cho blog ${commentData.blog_id}:`);
                console.error('Chi ti·∫øt l·ªói:', error);
                if (error.code === 11000) {
                    console.error('L·ªói tr√πng l·∫∑p key:', error.keyValue);
                }
            }
        }

        // Ki·ªÉm tra k·∫øt qu·∫£ cu·ªëi c√πng
        console.log('üîç Ki·ªÉm tra k·∫øt qu·∫£...');
        const [userCount, consultantCount, customerCount, blogCount, commentCount] = await Promise.all([
            User.countDocuments(),
            Consultant.countDocuments(),
            Customer.countDocuments(),
            Blog.countDocuments(),
            BlogComment.countDocuments()
        ]);

        console.log('üéâ K·∫æT QU·∫¢ IMPORT:');
        console.log(`üë• Users: ${userCount}`);
        console.log(`ü©∫ Consultants: ${consultantCount}`);
        console.log(`üë©‚Äç‚öïÔ∏è Customers: ${customerCount}`);
        console.log(`üìù Blogs: ${blogCount}`);
        console.log(`üí¨ Comments: ${commentCount}`);

        console.log('üéâ Ho√†n th√†nh import d·ªØ li·ªáu blog');
        process.exit(0);
    } catch (error) {
        console.error('‚ùå L·ªói khi import d·ªØ li·ªáu blog:', error);
        console.error('‚ùå Error stack:', error.stack);
        process.exit(1);
    }
}

importBlogs();

// ============ T·∫†O FILE JSON M·∫™U ============

// UsersDB.json
/*
[
  {
    "email": "bs.nguyenthilan@healthcenter.com",
    "password": "$2b$10$abcdefghijklmnopqrstuvwxyz123456789",
    "full_name": "BS. Nguy·ªÖn Th·ªã Lan",
    "phone": "0901234567",
    "role": "consultant",
    "avatar": "https://example.com/avatars/bs_lan.jpg",
    "status": true,
    "email_verified": true,
    "registration_date": "2024-01-15T08:00:00.000Z",
    "updated_date": "2024-12-01T10:30:00.000Z"
  },
  {
    "email": "ths.tranvanminh@healthcenter.com",
    "password": "$2b$10$abcdefghijklmnopqrstuvwxyz987654321",
    "full_name": "ThS. Tr·∫ßn VƒÉn Minh",
    "phone": "0907654321",
    "role": "consultant",
    "avatar": "https://example.com/avatars/ths_minh.jpg",
    "status": true,
    "email_verified": true,
    "registration_date": "2024-02-20T09:15:00.000Z",
    "updated_date": "2024-11-28T14:00:00.000Z"
  },
  {
    "email": "nguyenthihoa@gmail.com",
    "password": "$2b$10$customerpassword123456789",
    "full_name": "Nguy·ªÖn Th·ªã Hoa",
    "phone": "0912345678",
    "role": "customer",
    "avatar": "https://example.com/avatars/customer_25.jpg",
    "status": true,
    "email_verified": true,
    "registration_date": "2024-06-10T14:30:00.000Z",
    "updated_date": "2024-12-02T15:00:00.000Z"
  },
  {
    "email": "lethimai@gmail.com",
    "password": "$2b$10$customerpassword987654321",
    "full_name": "L√™ Th·ªã Mai",
    "phone": "0918765432",
    "role": "customer",
    "avatar": "https://example.com/avatars/customer_26.jpg",
    "status": true,
    "email_verified": true,
    "registration_date": "2024-07-05T10:20:00.000Z",
    "updated_date": "2024-12-02T16:00:00.000Z"
  }
]
*/

// ConsultantsDB.json
/*
[
  {
    "user_id": "USER_OBJECTID_1_HERE",
    "specialization": "S·∫£n ph·ª• khoa",
    "qualifications": "B√°c sƒ© chuy√™n khoa I S·∫£n ph·ª• khoa",
    "experience_years": 8,
    "consultation_rating": 4.8,
    "total_consultations": 256
  },
  {
    "user_id": "USER_OBJECTID_2_HERE",
    "specialization": "Y h·ªçc d·ª± ph√≤ng",
    "qualifications": "Th·∫°c sƒ© Y h·ªçc d·ª± ph√≤ng",
    "experience_years": 5,
    "consultation_rating": 4.6,
    "total_consultations": 189
  }
]
*/

// CustomersDB.json
/*
[
  {
    "user_id": "USER_OBJECTID_3_HERE",
    "medical_history": "Kh√¥ng c√≥ b·ªánh l√Ω ƒë·∫∑c bi·ªát",
    "custom_avatar": "https://example.com/custom_avatars/customer_25_custom.jpg",
    "last_updated": "2024-11-15T14:20:00.000Z"
  },
  {
    "user_id": "USER_OBJECTID_4_HERE",
    "medical_history": "Ti·ªÅn s·ª≠ vi√™m nhi·ªÖm ph·ª• khoa",
    "custom_avatar": null,
    "last_updated": "2024-12-01T09:30:00.000Z"
  }
]
*/

// BlogsDB.json
/*
[
  {
    "author_id": "USER_OBJECTID_1_HERE",
    "title": "Hi·ªÉu bi·∫øt c∆° b·∫£n v·ªÅ s·ª©c kh·ªèe sinh s·∫£n ·ªü ph·ª• n·ªØ",
    "content": "S·ª©c kh·ªèe sinh s·∫£n l√† m·ªôt ph·∫ßn quan tr·ªçng trong cu·ªôc s·ªëng c·ªßa m·ªói ph·ª• n·ªØ. Vi·ªác hi·ªÉu r√µ v·ªÅ chu k·ª≥ kinh nguy·ªát, c√°c d·∫•u hi·ªáu b·∫•t th∆∞·ªùng v√† c√°ch chƒÉm s√≥c b·∫£n th√¢n s·∫Ω gi√∫p ph·ª• n·ªØ duy tr√¨ s·ª©c kh·ªèe t·ªët nh·∫•t.",
    "publish_date": "2024-12-01T08:30:00.000Z",
    "updated_date": "2024-12-02T10:15:00.000Z",
    "status": "published"
  },
  {
    "author_id": "USER_OBJECTID_2_HERE",
    "title": "Ph√≤ng tr√°nh c√°c b·ªánh l√¢y truy·ªÅn qua ƒë∆∞·ªùng t√¨nh d·ª•c (STIs)",
    "content": "C√°c b·ªánh l√¢y truy·ªÅn qua ƒë∆∞·ªùng t√¨nh d·ª•c (STIs) l√† m·ªëi quan t√¢m h√†ng ƒë·∫ßu v·ªÅ s·ª©c kh·ªèe sinh s·∫£n. B√†i vi·∫øt n√†y s·∫Ω cung c·∫•p th√¥ng tin chi ti·∫øt v·ªÅ c√°c bi·ªán ph√°p ph√≤ng tr√°nh hi·ªáu qu·∫£.",
    "publish_date": "2024-11-28T14:20:00.000Z",
    "updated_date": "2024-11-28T14:20:00.000Z",
    "status": "published"
  },
  {
    "author_id": "USER_OBJECTID_1_HERE",
    "title": "H∆∞·ªõng d·∫´n theo d√µi chu k·ª≥ kinh nguy·ªát hi·ªáu qu·∫£",
    "content": "Theo d√µi chu k·ª≥ kinh nguy·ªát kh√¥ng ch·ªâ gi√∫p ph·ª• n·ªØ hi·ªÉu r√µ h∆°n v·ªÅ c∆° th·ªÉ m√¨nh m√† c√≤n h·ªó tr·ª£ trong vi·ªác k·∫ø ho·∫°ch h√≥a gia ƒë√¨nh v√† ph√°t hi·ªán s·ªõm c√°c b·∫•t th∆∞·ªùng.",
    "publish_date": "2024-11-25T09:45:00.000Z",
    "updated_date": "2024-11-26T16:30:00.000Z",
    "status": "published"
  }
]
*/

// BlogCommentsDB.json
/*
[
  {
    "blog_id": "BLOG_OBJECTID_1_HERE",
    "customer_id": "USER_OBJECTID_3_HERE",
    "content": "B√†i vi·∫øt r·∫•t h·ªØu √≠ch! T√¥i ƒë√£ hi·ªÉu r√µ h∆°n v·ªÅ chu k·ª≥ kinh nguy·ªát c·ªßa m√¨nh.",
    "comment_date": "2024-12-02T15:30:00.000Z",
    "parent_comment_id": null,
    "status": "approved",
    "is_anonymous": false
  },
  {
    "blog_id": "BLOG_OBJECTID_1_HERE",
    "customer_id": "USER_OBJECTID_4_HERE",
    "content": "M√¨nh c≈©ng ƒë·ªìng √Ω v·ªõi ch·ªã ·ªü tr√™n. Th√¥ng tin trong b√†i r·∫•t d·ªÖ hi·ªÉu v√† th·ª±c t·∫ø.",
    "comment_date": "2024-12-02T16:45:00.000Z",
    "parent_comment_id": null,
    "status": "approved",
    "is_anonymous": false
  },
  {
    "blog_id": "BLOG_OBJECTID_1_HERE",
    "customer_id": null,
    "content": "T√¥i mu·ªën h·ªèi th√™m v·ªÅ vi·ªác chu k·ª≥ kinh nguy·ªát kh√¥ng ƒë·ªÅu th√¨ c√≥ c·∫ßn lo l·∫Øng kh√¥ng ·∫°?",
    "comment_date": "2024-12-03T09:20:00.000Z",
    "parent_comment_id": null,
    "status": "approved",
    "is_anonymous": true
  },
  {
    "blog_id": "BLOG_OBJECTID_2_HERE",
    "customer_id": "USER_OBJECTID_4_HERE",
    "content": "Th√¥ng tin v·ªÅ ph√≤ng tr√°nh STIs r·∫•t c·∫ßn thi·∫øt. Mong c√≥ th√™m nhi·ªÅu b√†i vi·∫øt nh∆∞ th·∫ø n√†y.",
    "comment_date": "2024-11-29T10:20:00.000Z",
    "parent_comment_id": null,
    "status": "approved",
    "is_anonymous": false
  }
]
*/