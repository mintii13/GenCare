// ============ KI·ªÇM TRA V√Ä S·ª¨A DATABASE CONFIG ============

// src/configs/database.ts - ƒê·∫£m b·∫£o connection string ƒë√∫ng
import mongoose from 'mongoose';

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/GenCare'; // ‚Üê Ph·∫£i l√† GenCare

export const connectDatabase = async (): Promise<void> => {
    try {
        console.log('üîÑ Connecting to database:', MONGODB_URI); // Log ƒë·ªÉ ki·ªÉm tra

        await mongoose.connect(MONGODB_URI);

        console.log('‚úÖ Connected to MongoDB:', mongoose.connection.name); // Log t√™n database
        console.log('üìç Database host:', mongoose.connection.host);
        console.log('üìç Database port:', mongoose.connection.port);
    } catch (error) {
        console.error('‚ùå MongoDB connection error:', error);
        process.exit(1);
    }
};

// ============ SCRIPT INSERT V√ÄO ƒê√öNG DATABASE ============

// src/scripts/insertToGenCare.ts
import mongoose from 'mongoose';
import { User } from '../models/User';
import { Consultant } from '../models/Consultant';
import { Customer } from '../models/Customer';
import { Blog } from '../models/Blog';
import { BlogComment } from '../models/BlogComment';

async function insertToGenCare() {
    try {
        // K·∫øt n·ªëi tr·ª±c ti·∫øp t·ªõi GenCare database
        const GENCARE_URI = 'mongodb://localhost:27017/GenCare';
        console.log('üîÑ Connecting directly to GenCare database...');
        console.log('üìç URI:', GENCARE_URI);

        await mongoose.connect(GENCARE_URI);

        console.log('‚úÖ Connected to MongoDB');
        console.log('üìç Current database:', mongoose.connection.name);
        console.log('üìç Host:', mongoose.connection.host);
        console.log('üìç Port:', mongoose.connection.port);

        // Ki·ªÉm tra collections hi·ªán t·∫°i
        const collections = await mongoose.connection.db.listCollections().toArray();
        console.log('üìÇ Current collections:', collections.map(c => c.name));

        // X√≥a d·ªØ li·ªáu c≈© trong GenCare
        console.log('üóëÔ∏è Clearing old data in GenCare...');
        await BlogComment.deleteMany({});
        await Blog.deleteMany({});
        await Customer.deleteMany({});
        await Consultant.deleteMany({});
        await User.deleteMany({});
        console.log('‚úÖ Old data cleared');

        // Insert Users
        console.log('üë• Inserting users into GenCare...');
        const user1 = await User.create({
            email: "bs.nguyenthilan@healthcenter.com",
            password: "$2b$10$abcdefghijklmnopqrstuvwxyz123456789",
            full_name: "BS. Nguy·ªÖn Th·ªã Lan",
            phone: "0901234567",
            role: "consultant",
            avatar: "https://example.com/avatars/bs_lan.jpg",
            status: true,
            email_verified: true
        });
        console.log('‚úÖ User 1 created:', user1._id);

        const user2 = await User.create({
            email: "ths.tranvanminh@healthcenter.com",
            password: "$2b$10$abcdefghijklmnopqrstuvwxyz987654321",
            full_name: "ThS. Tr·∫ßn VƒÉn Minh",
            phone: "0907654321",
            role: "consultant",
            avatar: "https://example.com/avatars/ths_minh.jpg",
            status: true,
            email_verified: true
        });
        console.log('‚úÖ User 2 created:', user2._id);

        const user3 = await User.create({
            email: "nguyenthihoa@gmail.com",
            password: "$2b$10$customerpassword123456789",
            full_name: "Nguy·ªÖn Th·ªã Hoa",
            phone: "0912345678",
            role: "customer",
            avatar: "https://example.com/avatars/customer_25.jpg",
            status: true,
            email_verified: true
        });
        console.log('‚úÖ User 3 created:', user3._id);

        const user4 = await User.create({
            email: "lethimai@gmail.com",
            password: "$2b$10$customerpassword987654321",
            full_name: "L√™ Th·ªã Mai",
            phone: "0918765432",
            role: "customer",
            avatar: "https://example.com/avatars/customer_26.jpg",
            status: true,
            email_verified: true
        });
        console.log('‚úÖ User 4 created:', user4._id);

        // Insert Consultants
        console.log('ü©∫ Inserting consultants into GenCare...');
        const consultant1 = await Consultant.create({
            user_id: user1._id,
            specialization: "S·∫£n ph·ª• khoa",
            qualifications: "B√°c sƒ© chuy√™n khoa I S·∫£n ph·ª• khoa",
            experience_years: 8,
            consultation_rating: 4.8,
            total_consultations: 256
        });
        console.log('‚úÖ Consultant 1 created:', consultant1._id);

        const consultant2 = await Consultant.create({
            user_id: user2._id,
            specialization: "Y h·ªçc d·ª± ph√≤ng",
            qualifications: "Th·∫°c sƒ© Y h·ªçc d·ª± ph√≤ng",
            experience_years: 5,
            consultation_rating: 4.6,
            total_consultations: 189
        });
        console.log('‚úÖ Consultant 2 created:', consultant2._id);

        // Insert Customers
        console.log('üë©‚Äç‚öïÔ∏è Inserting customers into GenCare...');
        const customer1 = await Customer.create({
            user_id: user3._id,
            medical_history: "Kh√¥ng c√≥ b·ªánh l√Ω ƒë·∫∑c bi·ªát",
            custom_avatar: "https://example.com/custom_avatars/customer_25_custom.jpg",
            last_updated: new Date("2024-11-15T14:20:00.000Z")
        });
        console.log('‚úÖ Customer 1 created:', customer1._id);

        const customer2 = await Customer.create({
            user_id: user4._id,
            medical_history: "Ti·ªÅn s·ª≠ vi√™m nhi·ªÖm ph·ª• khoa",
            custom_avatar: null,
            last_updated: new Date("2024-12-01T09:30:00.000Z")
        });
        console.log('‚úÖ Customer 2 created:', customer2._id);

        // Insert Blogs
        console.log('üìù Inserting blogs into GenCare...');
        const blog1 = await Blog.create({
            author_id: user1._id,
            title: "Hi·ªÉu bi·∫øt c∆° b·∫£n v·ªÅ s·ª©c kh·ªèe sinh s·∫£n ·ªü ph·ª• n·ªØ",
            content: "S·ª©c kh·ªèe sinh s·∫£n l√† m·ªôt ph·∫ßn quan tr·ªçng trong cu·ªôc s·ªëng c·ªßa m·ªói ph·ª• n·ªØ. Vi·ªác hi·ªÉu r√µ v·ªÅ chu k·ª≥ kinh nguy·ªát, c√°c d·∫•u hi·ªáu b·∫•t th∆∞·ªùng v√† c√°ch chƒÉm s√≥c b·∫£n th√¢n s·∫Ω gi√∫p ph·ª• n·ªØ duy tr√¨ s·ª©c kh·ªèe t·ªët nh·∫•t.",
            publish_date: new Date("2024-12-01T08:30:00.000Z"),
            updated_date: new Date("2024-12-02T10:15:00.000Z"),
            status: "published"
        });
        console.log('‚úÖ Blog 1 created:', blog1._id);

        const blog2 = await Blog.create({
            author_id: user2._id,
            title: "Ph√≤ng tr√°nh c√°c b·ªánh l√¢y truy·ªÅn qua ƒë∆∞·ªùng t√¨nh d·ª•c (STIs)",
            content: "C√°c b·ªánh l√¢y truy·ªÅn qua ƒë∆∞·ªùng t√¨nh d·ª•c (STIs) l√† m·ªëi quan t√¢m h√†ng ƒë·∫ßu v·ªÅ s·ª©c kh·ªèe sinh s·∫£n. B√†i vi·∫øt n√†y s·∫Ω cung c·∫•p th√¥ng tin chi ti·∫øt v·ªÅ c√°c bi·ªán ph√°p ph√≤ng tr√°nh hi·ªáu qu·∫£.",
            publish_date: new Date("2024-11-28T14:20:00.000Z"),
            updated_date: new Date("2024-11-28T14:20:00.000Z"),
            status: "published"
        });
        console.log('‚úÖ Blog 2 created:', blog2._id);

        const blog3 = await Blog.create({
            author_id: user1._id,
            title: "H∆∞·ªõng d·∫´n theo d√µi chu k·ª≥ kinh nguy·ªát hi·ªáu qu·∫£",
            content: "Theo d√µi chu k·ª≥ kinh nguy·ªát kh√¥ng ch·ªâ gi√∫p ph·ª• n·ªØ hi·ªÉu r√µ h∆°n v·ªÅ c∆° th·ªÉ m√¨nh m√† c√≤n h·ªó tr·ª£ trong vi·ªác k·∫ø ho·∫°ch h√≥a gia ƒë√¨nh v√† ph√°t hi·ªán s·ªõm c√°c b·∫•t th∆∞·ªùng.",
            publish_date: new Date("2024-11-25T09:45:00.000Z"),
            updated_date: new Date("2024-11-26T16:30:00.000Z"),
            status: "published"
        });
        console.log('‚úÖ Blog 3 created:', blog3._id);

        // Insert Blog Comments
        console.log('üí¨ Inserting blog comments into GenCare...');
        const comment1 = await BlogComment.create({
            blog_id: blog1._id,
            customer_id: user3._id,
            content: "B√†i vi·∫øt r·∫•t h·ªØu √≠ch! T√¥i ƒë√£ hi·ªÉu r√µ h∆°n v·ªÅ chu k·ª≥ kinh nguy·ªát c·ªßa m√¨nh.",
            comment_date: new Date("2024-12-02T15:30:00.000Z"),
            parent_comment_id: null,
            status: "approved",
            is_anonymous: false
        });
        console.log('‚úÖ Comment 1 created:', comment1._id);

        const comment2 = await BlogComment.create({
            blog_id: blog1._id,
            customer_id: user4._id,
            content: "M√¨nh c≈©ng ƒë·ªìng √Ω v·ªõi ch·ªã ·ªü tr√™n. Th√¥ng tin trong b√†i r·∫•t d·ªÖ hi·ªÉu v√† th·ª±c t·∫ø.",
            comment_date: new Date("2024-12-02T16:45:00.000Z"),
            parent_comment_id: null,
            status: "approved",
            is_anonymous: false
        });
        console.log('‚úÖ Comment 2 created:', comment2._id);

        const comment3 = await BlogComment.create({
            blog_id: blog1._id,
            customer_id: null,
            content: "T√¥i mu·ªën h·ªèi th√™m v·ªÅ vi·ªác chu k·ª≥ kinh nguy·ªát kh√¥ng ƒë·ªÅu th√¨ c√≥ c·∫ßn lo l·∫Øng kh√¥ng ·∫°?",
            comment_date: new Date("2024-12-03T09:20:00.000Z"),
            parent_comment_id: null,
            status: "approved",
            is_anonymous: true
        });
        console.log('‚úÖ Comment 3 created:', comment3._id);

        const comment4 = await BlogComment.create({
            blog_id: blog2._id,
            customer_id: user4._id,
            content: "Th√¥ng tin v·ªÅ ph√≤ng tr√°nh STIs r·∫•t c·∫ßn thi·∫øt. Mong c√≥ th√™m nhi·ªÅu b√†i vi·∫øt nh∆∞ th·∫ø n√†y.",
            comment_date: new Date("2024-11-29T10:20:00.000Z"),
            parent_comment_id: null,
            status: "approved",
            is_anonymous: false
        });
        console.log('‚úÖ Comment 4 created:', comment4._id);

        // Verify final counts
        console.log('üîç Verifying final counts in GenCare...');
        const [userCount, consultantCount, customerCount, blogCount, commentCount] = await Promise.all([
            User.countDocuments(),
            Consultant.countDocuments(),
            Customer.countDocuments(),
            Blog.countDocuments(),
            BlogComment.countDocuments()
        ]);

        console.log('üéâ FINAL RESULTS IN GENCARE:');
        console.log(`üë• Users: ${userCount}`);
        console.log(`ü©∫ Consultants: ${consultantCount}`);
        console.log(`üë©‚Äç‚öïÔ∏è Customers: ${customerCount}`);
        console.log(`üìù Blogs: ${blogCount}`);
        console.log(`üí¨ Comments: ${commentCount}`);

        console.log('üéâ All data inserted successfully into GenCare database!');

        await mongoose.connection.close();
        process.exit(0);
    } catch (error) {
        console.error('‚ùå Error inserting data into GenCare:', error);
        console.error('‚ùå Error stack:', error.stack);
        process.exit(1);
    }
}

insertToGenCare();

// ============ SCRIPT KI·ªÇM TRA DATABASE HI·ªÜN T·∫†I ============

// src/scripts/checkCurrentDatabase.ts
import mongoose from 'mongoose';

async function checkCurrentDatabase() {
    try {
        // Load environment variables
        require('dotenv').config();

        const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/GenCare';
        console.log('üîç Checking database connection...');
        console.log('üìç Connection URI:', MONGODB_URI);

        await mongoose.connect(MONGODB_URI);

        console.log('‚úÖ Connected to MongoDB');
        console.log('üìç Current database name:', mongoose.connection.name);
        console.log('üìç Host:', mongoose.connection.host);
        console.log('üìç Port:', mongoose.connection.port);

        // List all collections
        const collections = await mongoose.connection.db.listCollections().toArray();
        console.log('üìÇ Available collections:');
        collections.forEach(collection => {
            console.log(`   - ${collection.name}`);
        });

        // Count documents in each collection
        if (collections.length > 0) {
            console.log('\nüìä Document counts:');
            for (const collection of collections) {
                try {
                    const count = await mongoose.connection.db.collection(collection.name).countDocuments();
                    console.log(`   - ${collection.name}: ${count} documents`);
                } catch (error) {
                    console.log(`   - ${collection.name}: Error counting`);
                }
            }
        }

        await mongoose.connection.close();
        process.exit(0);
    } catch (error) {
        console.error('‚ùå Error checking database:', error);
        process.exit(1);
    }
}

checkCurrentDatabase();