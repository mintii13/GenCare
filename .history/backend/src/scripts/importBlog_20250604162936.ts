// src/scripts/insertStepByStep.ts
import { connectDatabase } from '../configs/database';
import { User } from '../models/User';
import { Consultant } from '../models/Consultant';
import { Customer } from '../models/Customer';
import { Blog } from '../models/Blog';
import { BlogComment } from '../models/BlogComment';

async function insertStepByStep() {
    try {
        console.log('üîÑ Step 1: Connecting to database...');
        await connectDatabase();
        console.log('‚úÖ Database connected');

        // X√≥a d·ªØ li·ªáu c≈© tr∆∞·ªõc
        console.log('üóëÔ∏è Step 2: Clearing old data...');
        await BlogComment.deleteMany({});
        await Blog.deleteMany({});
        await Customer.deleteMany({});
        await Consultant.deleteMany({});
        await User.deleteMany({});
        console.log('‚úÖ All old data cleared');

        // Step 3: Insert Users
        console.log('üë• Step 3: Inserting users...');
        try {
            const user1 = new User({
                email: "bs.nguyenthilan@healthcenter.com",
                password: "$2b$10$abcdefghijklmnopqrstuvwxyz123456789",
                full_name: "BS. Nguy·ªÖn Th·ªã Lan",
                phone: "0901234567",
                role: "consultant",
                avatar: "https://example.com/avatars/bs_lan.jpg",
                status: true,
                email_verified: true
            });
            await user1.save();
            console.log('‚úÖ User 1 saved:', user1._id);

            const user2 = new User({
                email: "ths.tranvanminh@healthcenter.com",
                password: "$2b$10$abcdefghijklmnopqrstuvwxyz987654321",
                full_name: "ThS. Tr·∫ßn VƒÉn Minh",
                phone: "0907654321",
                role: "consultant",
                avatar: "https://example.com/avatars/ths_minh.jpg",
                status: true,
                email_verified: true
            });
            await user2.save();
            console.log('‚úÖ User 2 saved:', user2._id);

            const user3 = new User({
                email: "nguyenthihoa@gmail.com",
                password: "$2b$10$customerpassword123456789",
                full_name: "Nguy·ªÖn Th·ªã Hoa",
                phone: "0912345678",
                role: "customer",
                avatar: "https://example.com/avatars/customer_25.jpg",
                status: true,
                email_verified: true
            });
            await user3.save();
            console.log('‚úÖ User 3 saved:', user3._id);

            const user4 = new User({
                email: "lethimai@gmail.com",
                password: "$2b$10$customerpassword987654321",
                full_name: "L√™ Th·ªã Mai",
                phone: "0918765432",
                role: "customer",
                avatar: "https://example.com/avatars/customer_26.jpg",
                status: true,
                email_verified: true
            });
            await user4.save();
            console.log('‚úÖ User 4 saved:', user4._id);

            // Step 4: Insert Consultants
            console.log('ü©∫ Step 4: Inserting consultants...');

            const consultant1 = new Consultant({
                user_id: user1._id,
                specialization: "S·∫£n ph·ª• khoa",
                qualifications: "B√°c sƒ© chuy√™n khoa I S·∫£n ph·ª• khoa",
                experience_years: 8,
                consultation_rating: 4.8,
                total_consultations: 256
            });
            await consultant1.save();
            console.log('‚úÖ Consultant 1 saved:', consultant1._id);

            const consultant2 = new Consultant({
                user_id: user2._id,
                specialization: "Y h·ªçc d·ª± ph√≤ng",
                qualifications: "Th·∫°c sƒ© Y h·ªçc d·ª± ph√≤ng",
                experience_years: 5,
                consultation_rating: 4.6,
                total_consultations: 189
            });
            await consultant2.save();
            console.log('‚úÖ Consultant 2 saved:', consultant2._id);

            // Step 5: Insert Customers
            console.log('üë©‚Äç‚öïÔ∏è Step 5: Inserting customers...');

            const customer1 = new Customer({
                user_id: user3._id,
                medical_history: "Kh√¥ng c√≥ b·ªánh l√Ω ƒë·∫∑c bi·ªát",
                custom_avatar: "https://example.com/custom_avatars/customer_25_custom.jpg",
                last_updated: new Date("2024-11-15T14:20:00.000Z")
            });
            await customer1.save();
            console.log('‚úÖ Customer 1 saved:', customer1._id);

            const customer2 = new Customer({
                user_id: user4._id,
                medical_history: "Ti·ªÅn s·ª≠ vi√™m nhi·ªÖm ph·ª• khoa",
                custom_avatar: null,
                last_updated: new Date("2024-12-01T09:30:00.000Z")
            });
            await customer2.save();
            console.log('‚úÖ Customer 2 saved:', customer2._id);

            // Step 6: Insert Blogs
            console.log('üìù Step 6: Inserting blogs...');

            const blog1 = new Blog({
                author_id: user1._id,
                title: "Hi·ªÉu bi·∫øt c∆° b·∫£n v·ªÅ s·ª©c kh·ªèe sinh s·∫£n ·ªü ph·ª• n·ªØ",
                content: "S·ª©c kh·ªèe sinh s·∫£n l√† m·ªôt ph·∫ßn quan tr·ªçng trong cu·ªôc s·ªëng c·ªßa m·ªói ph·ª• n·ªØ. Vi·ªác hi·ªÉu r√µ v·ªÅ chu k·ª≥ kinh nguy·ªát, c√°c d·∫•u hi·ªáu b·∫•t th∆∞·ªùng v√† c√°ch chƒÉm s√≥c b·∫£n th√¢n s·∫Ω gi√∫p ph·ª• n·ªØ duy tr√¨ s·ª©c kh·ªèe t·ªët nh·∫•t.",
                publish_date: new Date("2024-12-01T08:30:00.000Z"),
                updated_date: new Date("2024-12-02T10:15:00.000Z"),
                status: "published"
            });
            await blog1.save();
            console.log('‚úÖ Blog 1 saved:', blog1._id);

            const blog2 = new Blog({
                author_id: user2._id,
                title: "Ph√≤ng tr√°nh c√°c b·ªánh l√¢y truy·ªÅn qua ƒë∆∞·ªùng t√¨nh d·ª•c (STIs)",
                content: "C√°c b·ªánh l√¢y truy·ªÅn qua ƒë∆∞·ªùng t√¨nh d·ª•c (STIs) l√† m·ªëi quan t√¢m h√†ng ƒë·∫ßu v·ªÅ s·ª©c kh·ªèe sinh s·∫£n. B√†i vi·∫øt n√†y s·∫Ω cung c·∫•p th√¥ng tin chi ti·∫øt v·ªÅ c√°c bi·ªán ph√°p ph√≤ng tr√°nh hi·ªáu qu·∫£.",
                publish_date: new Date("2024-11-28T14:20:00.000Z"),
                updated_date: new Date("2024-11-28T14:20:00.000Z"),
                status: "published"
            });
            await blog2.save();
            console.log('‚úÖ Blog 2 saved:', blog2._id);

            const blog3 = new Blog({
                author_id: user1._id,
                title: "H∆∞·ªõng d·∫´n theo d√µi chu k·ª≥ kinh nguy·ªát hi·ªáu qu·∫£",
                content: "Theo d√µi chu k·ª≥ kinh nguy·ªát kh√¥ng ch·ªâ gi√∫p ph·ª• n·ªØ hi·ªÉu r√µ h∆°n v·ªÅ c∆° th·ªÉ m√¨nh m√† c√≤n h·ªó tr·ª£ trong vi·ªác k·∫ø ho·∫°ch h√≥a gia ƒë√¨nh v√† ph√°t hi·ªán s·ªõm c√°c b·∫•t th∆∞·ªùng.",
                publish_date: new Date("2024-11-25T09:45:00.000Z"),
                updated_date: new Date("2024-11-26T16:30:00.000Z"),
                status: "published"
            });
            await blog3.save();
            console.log('‚úÖ Blog 3 saved:', blog3._id);

            // Step 7: Insert Blog Comments
            console.log('üí¨ Step 7: Inserting blog comments...');

            const comment1 = new BlogComment({
                blog_id: blog1._id,
                customer_id: user3._id,
                content: "B√†i vi·∫øt r·∫•t h·ªØu √≠ch! T√¥i ƒë√£ hi·ªÉu r√µ h∆°n v·ªÅ chu k·ª≥ kinh nguy·ªát c·ªßa m√¨nh.",
                comment_date: new Date("2024-12-02T15:30:00.000Z"),
                parent_comment_id: null,
                status: "approved",
                is_anonymous: false
            });
            await comment1.save();
            console.log('‚úÖ Comment 1 saved:', comment1._id);

            const comment2 = new BlogComment({
                blog_id: blog1._id,
                customer_id: user4._id,
                content: "M√¨nh c≈©ng ƒë·ªìng √Ω v·ªõi ch·ªã ·ªü tr√™n. Th√¥ng tin trong b√†i r·∫•t d·ªÖ hi·ªÉu v√† th·ª±c t·∫ø.",
                comment_date: new Date("2024-12-02T16:45:00.000Z"),
                parent_comment_id: null,
                status: "approved",
                is_anonymous: false
            });
            await comment2.save();
            console.log('‚úÖ Comment 2 saved:', comment2._id);

            const comment3 = new BlogComment({
                blog_id: blog1._id,
                customer_id: null,
                content: "T√¥i mu·ªën h·ªèi th√™m v·ªÅ vi·ªác chu k·ª≥ kinh nguy·ªát kh√¥ng ƒë·ªÅu th√¨ c√≥ c·∫ßn lo l·∫Øng kh√¥ng ·∫°?",
                comment_date: new Date("2024-12-03T09:20:00.000Z"),
                parent_comment_id: null,
                status: "approved",
                is_anonymous: true
            });
            await comment3.save();
            console.log('‚úÖ Comment 3 saved:', comment3._id);

            const comment4 = new BlogComment({
                blog_id: blog2._id,
                customer_id: user4._id,
                content: "Th√¥ng tin v·ªÅ ph√≤ng tr√°nh STIs r·∫•t c·∫ßn thi·∫øt. Mong c√≥ th√™m nhi·ªÅu b√†i vi·∫øt nh∆∞ th·∫ø n√†y.",
                comment_date: new Date("2024-11-29T10:20:00.000Z"),
                parent_comment_id: null,
                status: "approved",
                is_anonymous: false
            });
            await comment4.save();
            console.log('‚úÖ Comment 4 saved:', comment4._id);

            // Step 8: Verify final counts
            console.log('üîç Step 8: Verifying final counts...');
            const [userCount, consultantCount, customerCount, blogCount, commentCount] = await Promise.all([
                User.countDocuments(),
                Consultant.countDocuments(),
                Customer.countDocuments(),
                Blog.countDocuments(),
                BlogComment.countDocuments()
            ]);

            console.log('üéâ FINAL RESULTS:');
            console.log(`üë• Users: ${userCount}`);
            console.log(`ü©∫ Consultants: ${consultantCount}`);
            console.log(`üë©‚Äç‚öïÔ∏è Customers: ${customerCount}`);
            console.log(`üìù Blogs: ${blogCount}`);
            console.log(`üí¨ Comments: ${commentCount}`);

            console.log('üéâ All data inserted successfully!');

        } catch (userError) {
            console.error('‚ùå Error in user/consultant/customer insertion:', userError);
            throw userError;
        }

        process.exit(0);
    } catch (error) {
        console.error('‚ùå Fatal error:', error);
        console.error('‚ùå Error stack:', error.stack);
        process.exit(1);
    }
}

insertStepByStep();

// ============ KI·ªÇM TRA SCHEMA VALIDATION ============

// src/scripts/testSchemas.ts
import { connectDatabase } from '../configs/database';
import { User } from '../models/User';
import { Consultant } from '../models/Consultant';
import { Customer } from '../models/Customer';
import { Blog } from '../models/Blog';
import { BlogComment } from '../models/BlogComment';

async function testSchemas() {
    try {
        await connectDatabase();
        console.log('‚úÖ Database connected');

        // Test User schema
        console.log('üß™ Testing User schema...');
        const testUser = new User({
            email: "test@test.com",
            full_name: "Test User",
            role: "customer",
            status: true,
            email_verified: true
        });

        const validationResult = testUser.validateSync();
        if (validationResult) {
            console.log('‚ùå User validation error:', validationResult.errors);
        } else {
            console.log('‚úÖ User schema validation passed');
        }

        // Test Blog schema
        console.log('üß™ Testing Blog schema...');
        const testBlog = new Blog({
            author_id: testUser._id,
            title: "Test Blog",
            content: "Test content",
            status: "published"
        });

        const blogValidation = testBlog.validateSync();
        if (blogValidation) {
            console.log('‚ùå Blog validation error:', blogValidation.errors);
        } else {
            console.log('‚úÖ Blog schema validation passed');
        }

        // Test BlogComment schema
        console.log('üß™ Testing BlogComment schema...');
        const testComment = new BlogComment({
            blog_id: testBlog._id,
            customer_id: testUser._id,
            content: "Test comment",
            status: "approved",
            is_anonymous: false
        });

        const commentValidation = testComment.validateSync();
        if (commentValidation) {
            console.log('‚ùå Comment validation error:', commentValidation.errors);
        } else {
            console.log('‚úÖ Comment schema validation passed');
        }

        console.log('üéâ All schema tests completed');
        process.exit(0);
    } catch (error) {
        console.error('‚ùå Schema test error:', error);
        process.exit(1);
    }
}

// Uncomment to run schema test
// testSchemas();