// src/scripts/insertBlogDataDebug.ts
import { connectDatabase } from '../configs/database';
import { User } from '../models/User';
import { Consultant } from '../models/Consultant';
import { Customer } from '../models/Customer';
import { Blog } from '../models/Blog';
import { BlogComment } from '../models/BlogComment';

async function insertBlogDataDebug() {
    try {
        console.log('üîÑ Connecting to database...');
        await connectDatabase();
        console.log('‚úÖ Database connected successfully');

        // Ki·ªÉm tra connection
        const collections = await Promise.all([
            User.countDocuments(),
            Consultant.countDocuments(),
            Customer.countDocuments(),
            Blog.countDocuments(),
            BlogComment.countDocuments()
        ]);
        console.log('üìä Current collections count:', {
            users: collections[0],
            consultants: collections[1],
            customers: collections[2],
            blogs: collections[3],
            blogComments: collections[4]
        });

        // X√≥a d·ªØ li·ªáu c≈©
        console.log('üóëÔ∏è Clearing old data...');
        await BlogComment.deleteMany({});
        console.log('‚úÖ Cleared blog_comments');

        await Blog.deleteMany({});
        console.log('‚úÖ Cleared blogs');

        await Customer.deleteMany({});
        console.log('‚úÖ Cleared customers');

        await Consultant.deleteMany({});
        console.log('‚úÖ Cleared consultants');

        await User.deleteMany({});
        console.log('‚úÖ Cleared users');

        // Insert Users
        console.log('üë• Inserting users...');
        const usersData = [
            {
                email: "bs.nguyenthilan@healthcenter.com",
                password: "$2b$10$abcdefghijklmnopqrstuvwxyz123456789",
                full_name: "BS. Nguy·ªÖn Th·ªã Lan",
                phone: "0901234567",
                role: "consultant",
                avatar: "https://example.com/avatars/bs_lan.jpg",
                status: true,
                email_verified: true
            },
            {
                email: "ths.tranvanminh@healthcenter.com",
                password: "$2b$10$abcdefghijklmnopqrstuvwxyz987654321",
                full_name: "ThS. Tr·∫ßn VƒÉn Minh",
                phone: "0907654321",
                role: "consultant",
                avatar: "https://example.com/avatars/ths_minh.jpg",
                status: true,
                email_verified: true
            },
            {
                email: "nguyenthihoa@gmail.com",
                password: "$2b$10$customerpassword123456789",
                full_name: "Nguy·ªÖn Th·ªã Hoa",
                phone: "0912345678",
                role: "customer",
                avatar: "https://example.com/avatars/customer_25.jpg",
                status: true,
                email_verified: true
            },
            {
                email: "lethimai@gmail.com",
                password: "$2b$10$customerpassword987654321",
                full_name: "L√™ Th·ªã Mai",
                phone: "0918765432",
                role: "customer",
                avatar: "https://example.com/avatars/customer_26.jpg",
                status: true,
                email_verified: true
            }
        ];

        const insertedUsers = await User.insertMany(usersData);
        console.log(`‚úÖ ${insertedUsers.length} users inserted`);

        // Log user IDs
        insertedUsers.forEach(user => {
            console.log(`üë§ ${user.full_name}: ${user._id}`);
        });

        // L·∫•y ObjectId c·ªßa users
        const lanUser = insertedUsers.find(u => u.email === "bs.nguyenthilan@healthcenter.com");
        const minhUser = insertedUsers.find(u => u.email === "ths.tranvanminh@healthcenter.com");
        const hoaUser = insertedUsers.find(u => u.email === "nguyenthihoa@gmail.com");
        const maiUser = insertedUsers.find(u => u.email === "lethimai@gmail.com");

        if (!lanUser || !minhUser || !hoaUser || !maiUser) {
            throw new Error('‚ùå Some users not found after insert');
        }

        // Insert Consultants
        console.log('ü©∫ Inserting consultants...');
        const consultantsData = [
            {
                user_id: lanUser._id,
                specialization: "S·∫£n ph·ª• khoa",
                qualifications: "B√°c sƒ© chuy√™n khoa I S·∫£n ph·ª• khoa",
                experience_years: 8,
                consultation_rating: 4.8,
                total_consultations: 256
            },
            {
                user_id: minhUser._id,
                specialization: "Y h·ªçc d·ª± ph√≤ng",
                qualifications: "Th·∫°c sƒ© Y h·ªçc d·ª± ph√≤ng",
                experience_years: 5,
                consultation_rating: 4.6,
                total_consultations: 189
            }
        ];

        const insertedConsultants = await Consultant.insertMany(consultantsData);
        console.log(`‚úÖ ${insertedConsultants.length} consultants inserted`);

        // Insert Customers
        console.log('üë©‚Äç‚öïÔ∏è Inserting customers...');
        const customersData = [
            {
                user_id: hoaUser._id,
                medical_history: "Kh√¥ng c√≥ b·ªánh l√Ω ƒë·∫∑c bi·ªát",
                custom_avatar: "https://example.com/custom_avatars/customer_25_custom.jpg",
                last_updated: new Date("2024-11-15T14:20:00.000Z")
            },
            {
                user_id: maiUser._id,
                medical_history: "Ti·ªÅn s·ª≠ vi√™m nhi·ªÖm ph·ª• khoa",
                custom_avatar: null,
                last_updated: new Date("2024-12-01T09:30:00.000Z")
            }
        ];

        const insertedCustomers = await Customer.insertMany(customersData);
        console.log(`‚úÖ ${insertedCustomers.length} customers inserted`);

        // Insert Blogs
        console.log('üìù Inserting blogs...');
        const blogsData = [
            {
                author_id: lanUser._id,
                title: "Hi·ªÉu bi·∫øt c∆° b·∫£n v·ªÅ s·ª©c kh·ªèe sinh s·∫£n ·ªü ph·ª• n·ªØ",
                content: "S·ª©c kh·ªèe sinh s·∫£n l√† m·ªôt ph·∫ßn quan tr·ªçng trong cu·ªôc s·ªëng c·ªßa m·ªói ph·ª• n·ªØ. Vi·ªác hi·ªÉu r√µ v·ªÅ chu k·ª≥ kinh nguy·ªát, c√°c d·∫•u hi·ªáu b·∫•t th∆∞·ªùng v√† c√°ch chƒÉm s√≥c b·∫£n th√¢n s·∫Ω gi√∫p ph·ª• n·ªØ duy tr√¨ s·ª©c kh·ªèe t·ªët nh·∫•t.",
                publish_date: new Date("2024-12-01T08:30:00.000Z"),
                updated_date: new Date("2024-12-02T10:15:00.000Z"),
                status: "published"
            },
            {
                author_id: minhUser._id,
                title: "Ph√≤ng tr√°nh c√°c b·ªánh l√¢y truy·ªÅn qua ƒë∆∞·ªùng t√¨nh d·ª•c (STIs)",
                content: "C√°c b·ªánh l√¢y truy·ªÅn qua ƒë∆∞·ªùng t√¨nh d·ª•c (STIs) l√† m·ªëi quan t√¢m h√†ng ƒë·∫ßu v·ªÅ s·ª©c kh·ªèe sinh s·∫£n. B√†i vi·∫øt n√†y s·∫Ω cung c·∫•p th√¥ng tin chi ti·∫øt v·ªÅ c√°c bi·ªán ph√°p ph√≤ng tr√°nh hi·ªáu qu·∫£.",
                publish_date: new Date("2024-11-28T14:20:00.000Z"),
                updated_date: new Date("2024-11-28T14:20:00.000Z"),
                status: "published"
            },
            {
                author_id: lanUser._id,
                title: "H∆∞·ªõng d·∫´n theo d√µi chu k·ª≥ kinh nguy·ªát hi·ªáu qu·∫£",
                content: "Theo d√µi chu k·ª≥ kinh nguy·ªát kh√¥ng ch·ªâ gi√∫p ph·ª• n·ªØ hi·ªÉu r√µ h∆°n v·ªÅ c∆° th·ªÉ m√¨nh m√† c√≤n h·ªó tr·ª£ trong vi·ªác k·∫ø ho·∫°ch h√≥a gia ƒë√¨nh v√† ph√°t hi·ªán s·ªõm c√°c b·∫•t th∆∞·ªùng.",
                publish_date: new Date("2024-11-25T09:45:00.000Z"),
                updated_date: new Date("2024-11-26T16:30:00.000Z"),
                status: "published"
            }
        ];

        const insertedBlogs = await Blog.insertMany(blogsData);
        console.log(`‚úÖ ${insertedBlogs.length} blogs inserted`);

        // Log blog IDs
        insertedBlogs.forEach(blog => {
            console.log(`üìù ${blog.title.substring(0, 30)}...: ${blog._id}`);
        });

        // Insert Blog Comments
        console.log('üí¨ Inserting blog comments...');
        const commentsData = [
            {
                blog_id: insertedBlogs[0]._id,
                customer_id: hoaUser._id,
                content: "B√†i vi·∫øt r·∫•t h·ªØu √≠ch! T√¥i ƒë√£ hi·ªÉu r√µ h∆°n v·ªÅ chu k·ª≥ kinh nguy·ªát c·ªßa m√¨nh.",
                comment_date: new Date("2024-12-02T15:30:00.000Z"),
                parent_comment_id: null,
                status: "approved",
                is_anonymous: false
            },
            {
                blog_id: insertedBlogs[0]._id,
                customer_id: maiUser._id,
                content: "M√¨nh c≈©ng ƒë·ªìng √Ω v·ªõi ch·ªã ·ªü tr√™n. Th√¥ng tin trong b√†i r·∫•t d·ªÖ hi·ªÉu v√† th·ª±c t·∫ø.",
                comment_date: new Date("2024-12-02T16:45:00.000Z"),
                parent_comment_id: null,
                status: "approved",
                is_anonymous: false
            },
            {
                blog_id: insertedBlogs[0]._id,
                customer_id: null,
                content: "T√¥i mu·ªën h·ªèi th√™m v·ªÅ vi·ªác chu k·ª≥ kinh nguy·ªát kh√¥ng ƒë·ªÅu th√¨ c√≥ c·∫ßn lo l·∫Øng kh√¥ng ·∫°?",
                comment_date: new Date("2024-12-03T09:20:00.000Z"),
                parent_comment_id: null,
                status: "approved",
                is_anonymous: true
            },
            {
                blog_id: insertedBlogs[1]._id,
                customer_id: maiUser._id,
                content: "Th√¥ng tin v·ªÅ ph√≤ng tr√°nh STIs r·∫•t c·∫ßn thi·∫øt. Mong c√≥ th√™m nhi·ªÅu b√†i vi·∫øt nh∆∞ th·∫ø n√†y.",
                comment_date: new Date("2024-11-29T10:20:00.000Z"),
                parent_comment_id: null,
                status: "approved",
                is_anonymous: false
            }
        ];

        const insertedComments = await BlogComment.insertMany(commentsData);
        console.log(`‚úÖ ${insertedComments.length} blog comments inserted`);

        // Ki·ªÉm tra k·∫øt qu·∫£ cu·ªëi c√πng
        const finalCounts = await Promise.all([
            User.countDocuments(),
            Consultant.countDocuments(),
            Customer.countDocuments(),
            Blog.countDocuments(),
            BlogComment.countDocuments()
        ]);

        console.log('üéâ Final collections count:', {
            users: finalCounts[0],
            consultants: finalCounts[1],
            customers: finalCounts[2],
            blogs: finalCounts[3],
            blogComments: finalCounts[4]
        });

        console.log('üéâ All data inserted successfully');
        process.exit(0);
    } catch (error) {
        console.error('‚ùå Error inserting data:', error);
        console.error('Stack trace:', error.stack);
        process.exit(1);
    }
}

insertBlogDataDebug();

