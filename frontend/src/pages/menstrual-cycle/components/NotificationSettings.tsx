import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../../components/ui/card';
import { Button } from '../../../components/ui/button';
import { Switch } from '../../../components/ui/switch';
import { Label } from '../../../components/ui/label';
import { FaBell, FaCog, FaSave, FaCheck, FaExclamationTriangle, FaChartBar, FaLightbulb, FaBullseye } from 'react-icons/fa';
import { HiSparkles } from 'react-icons/hi';
import { toast } from 'react-hot-toast';

interface NotificationSettingsProps {
  onRefresh: () => void;
}

interface NotificationSettings {
  notification_enabled: boolean;
  notification_types: string[];
}

const NotificationSettings: React.FC<NotificationSettingsProps> = ({ onRefresh }) => {
  const [notificationEnabled, setNotificationEnabled] = useState(true);
  const [notificationTypes, setNotificationTypes] = useState<string[]>(['period', 'ovulation']);
  const [loading, setLoading] = useState(false);
  const [initialLoading, setInitialLoading] = useState(true);

  const notificationOptions = [
    {
      id: 'period',
      label: 'Kinh nguy·ªát',
      description: 'Nh·∫Øc nh·ªü khi chu k√¨ kinh nguy·ªát s·∫Øp ƒë·∫øn',

      color: 'text-pink-600',
      bgColor: 'bg-pink-50',
      borderColor: 'border-pink-200'
    },
    {
      id: 'ovulation',
      label: 'R·ª•ng tr·ª©ng',
      description: 'Th√¥ng b√°o ng√†y r·ª•ng tr·ª©ng d·ª± ƒëo√°n',

      color: 'text-purple-600',
      bgColor: 'bg-purple-50',
      borderColor: 'border-purple-200'
    },
    {
      id: 'fertile_start',
      label: 'B·∫Øt ƒë·∫ßu c·ª≠a s·ªï sinh s·∫£n',
      description: 'Th√¥ng b√°o khi b·∫Øt ƒë·∫ßu giai ƒëo·∫°n c√≥ th·ªÉ th·ª• thai',

      color: 'text-green-600',
      bgColor: 'bg-green-50',
      borderColor: 'border-green-200'
    },
    {
      id: 'fertile_end',
      label: 'K·∫øt th√∫c c·ª≠a s·ªï sinh s·∫£n',
      description: 'Th√¥ng b√°o khi k·∫øt th√∫c giai ƒëo·∫°n c√≥ th·ªÉ th·ª• thai',
      icon: 'üåø',
      color: 'text-blue-600',
      bgColor: 'bg-blue-50',
      borderColor: 'border-blue-200'
    },
  ];

  useEffect(() => {
    loadNotificationSettings();
  }, []);

  const loadNotificationSettings = async () => {
    try {
      setInitialLoading(true);

      const savedSettings = localStorage.getItem('gencare_notification_settings');
      if (savedSettings) {
        const settings: NotificationSettings = JSON.parse(savedSettings);
        setNotificationEnabled(settings.notification_enabled);
        setNotificationTypes(settings.notification_types);
      }
    } catch (error) {
      console.error('Error loading notification settings:', error);
    } finally {
      setInitialLoading(false);
    }
  };

  const handleNotificationTypeChange = (typeId: string, enabled: boolean) => {
    setNotificationTypes(prev => {
      if (enabled && !prev.includes(typeId)) {
        return [...prev, typeId];
      } else if (!enabled && prev.includes(typeId)) {
        return prev.filter(type => type !== typeId);
      }
      return prev;
    });
  };

  const handleSave = async () => {
    try {
      setLoading(true);
      
      const settings: NotificationSettings = {
        notification_enabled: notificationEnabled,
        notification_types: notificationTypes
      };

      localStorage.setItem('gencare_notification_settings', JSON.stringify(settings));

      await new Promise(resolve => setTimeout(resolve, 1000));
      
      toast.success('ƒê√£ c·∫≠p nh·∫≠t c√†i ƒë·∫∑t th√¥ng b√°o th√†nh c√¥ng!');
      onRefresh();
    } catch (error) {
      
      toast.error('L·ªói khi c·∫≠p nh·∫≠t c√†i ƒë·∫∑t');
    } finally {
      setLoading(false);
    }
  };

  if (initialLoading) {
    return (
      <div className="flex justify-center items-center py-12">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-pink-600 mx-auto mb-4"></div>
          <p className="text-gray-600">ƒêang t·∫£i c√†i ƒë·∫∑t...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <Card className="border-0 shadow-lg overflow-hidden">
        <CardHeader className="bg-gradient-to-r from-pink-500 via-purple-500 to-indigo-600 text-white">
          <CardTitle className="flex items-center gap-2">
            <div className="w-8 h-8 bg-white/20 rounded-lg flex items-center justify-center backdrop-blur">
              <FaBell className="h-5 w-5" />
            </div>
            C√†i ƒê·∫∑t Th√¥ng B√°o
          </CardTitle>
          <CardDescription className="text-white/90">
            Qu·∫£n l√Ω c√°c th√¥ng b√°o cho chu k√¨ kinh nguy·ªát c·ªßa b·∫°n
          </CardDescription>
        </CardHeader>

        <CardContent className="space-y-6 p-6">
          {/* Master Toggle */}
          <div className="flex items-center justify-between p-4 bg-gradient-to-r from-pink-50 to-purple-50 rounded-xl border border-pink-200">
            <div className="flex-1">
              <Label htmlFor="master-notifications" className="text-base font-semibold text-gray-800 cursor-pointer">
                üîî B·∫≠t th√¥ng b√°o chung
              </Label>
              <p className="text-sm text-gray-600 mt-1">
                Cho ph√©p ·ª©ng d·ª•ng g·ª≠i th√¥ng b√°o v·ªÅ chu k√¨ kinh nguy·ªát
              </p>
            </div>
            <Switch
              id="master-notifications"
              checked={notificationEnabled}
              onCheckedChange={setNotificationEnabled}
              className="data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-pink-500 data-[state=checked]:to-purple-600"
            />
          </div>

          {/* Notification Types */}
          {notificationEnabled && (
            <div className="space-y-4 animate-in slide-in-from-top duration-300">
              <div className="flex items-center gap-2 mb-4">
                <HiSparkles className="h-5 w-5 text-purple-500" />
                <h4 className="font-semibold text-gray-900">Lo·∫°i th√¥ng b√°o:</h4>
              </div>
              
              <div className="grid gap-4">
                {notificationOptions.map((option) => {
                  const isChecked = notificationTypes.includes(option.id);
                  return (
                    <div
                      key={option.id}
                      className={`flex items-center justify-between p-4 border-2 rounded-xl transition-all duration-300 ${
                        isChecked 
                          ? `${option.borderColor} ${option.bgColor} shadow-md scale-[1.02]` 
                          : 'border-gray-200 bg-gray-50 hover:border-pink-300 hover:bg-pink-50'
                      }`}
                    >
                      <div className="flex items-center gap-3 flex-1">
                        <div className={`text-2xl p-2 rounded-lg ${isChecked ? option.bgColor : 'bg-gray-100'} transition-all duration-200`}>
                          {option.icon}
                        </div>
                        <div className="flex-1">
                          <Label 
                            htmlFor={option.id} 
                            className={`font-medium cursor-pointer transition-colors duration-200 ${
                              isChecked ? option.color : 'text-gray-700'
                            }`}
                          >
                            {option.label}
                          </Label>
                          <p className={`text-sm mt-1 transition-colors duration-200 ${
                            isChecked ? 'text-gray-700' : 'text-gray-600'
                          }`}>
                            {option.description}
                          </p>
                        </div>
                      </div>
                      <div className="relative">
                        <Switch
                          id={option.id}
                          checked={isChecked}
                          onCheckedChange={(checked: boolean) => 
                            handleNotificationTypeChange(option.id, checked)
                          }
                          className="data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-pink-500 data-[state=checked]:to-purple-600"
                        />
                        {isChecked && (
                          <div className="absolute -top-1 -right-1 w-4 h-4 bg-green-500 rounded-full flex items-center justify-center animate-in zoom-in duration-200">
                            <FaCheck className="h-2 w-2 text-white" />
                          </div>
                        )}
                      </div>
                    </div>
                  );
                })}
              </div>

              {notificationTypes.length === 0 && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4 text-center">
                  <FaExclamationTriangle className="inline text-red-500 mr-2" />
                  B·∫°n ch∆∞a ch·ªçn lo·∫°i th√¥ng b√°o n√†o. H√£y ch·ªçn √≠t nh·∫•t m·ªôt lo·∫°i ƒë·ªÉ nh·∫≠n th√¥ng b√°o.
                </div>
              )}
            </div>
          )}

          {/* Settings Summary */}
          <div className="p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl border border-blue-200">
            <h4 className="font-semibold text-blue-800 mb-2 flex items-center gap-2">
              <FaChartBar className="inline mr-2" />
              T√≥m t·∫Øt c√†i ƒë·∫∑t:
            </h4>
            <div className="space-y-2 text-sm">
              <div className="flex items-center gap-2">
                <div className={`w-3 h-3 rounded-full ${notificationEnabled ? 'bg-green-500' : 'bg-gray-400'}`}></div>
                <span className="text-blue-700">
                  Th√¥ng b√°o chung: <strong>{notificationEnabled ? 'ƒê√£ b·∫≠t' : 'ƒê√£ t·∫Øt'}</strong>
                </span>
              </div>
              <div className="flex items-center gap-2">
                <div className={`w-3 h-3 rounded-full ${notificationTypes.length > 0 ? 'bg-green-500' : 'bg-gray-400'}`}></div>
                <span className="text-blue-700">
                  ƒê√£ ch·ªçn: <strong>{notificationTypes.length}</strong> lo·∫°i th√¥ng b√°o
                </span>
              </div>
            </div>
          </div>

          {/* Save Button */}
          <div className="flex justify-end pt-4">
            <Button
              onClick={handleSave}
              disabled={loading}
              className="bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700 flex items-center gap-2 shadow-lg"
            >
              {loading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  ƒêang l∆∞u...
                </>
              ) : (
                <>
                  <FaSave className="h-4 w-4" />
                  L∆∞u c√†i ƒë·∫∑t
                </>
              )}
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Privacy & Data */}
      <Card className="border-0 shadow-lg overflow-hidden">
        <CardHeader className="bg-gradient-to-r from-gray-500 via-slate-600 to-gray-700 text-white">
          <CardTitle className="flex items-center gap-2">
            <div className="w-8 h-8 bg-white/20 rounded-lg flex items-center justify-center backdrop-blur">
              <FaCog className="h-5 w-5" />
            </div>
            Quy·ªÅn ri√™ng t∆∞ & D·ªØ li·ªáu
          </CardTitle>
          <CardDescription className="text-white/90">
            Th√¥ng tin v·ªÅ c√°ch ch√∫ng t√¥i b·∫£o v·ªá d·ªØ li·ªáu c·ªßa b·∫°n
          </CardDescription>
        </CardHeader>

        <CardContent className="p-6">
          <div className="space-y-6">
            {/* Security Info */}
            <div className="grid md:grid-cols-2 gap-6">
              <div className="p-4 bg-gradient-to-br from-green-50 to-emerald-50 rounded-xl border border-green-200">
                <div className="flex items-center gap-3 mb-3">
                  <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                    <span className="text-green-600 text-xl">üîí</span>
                  </div>
                  <h4 className="font-semibold text-green-800">B·∫£o m·∫≠t d·ªØ li·ªáu</h4>
                </div>
                <p className="text-sm text-green-700">
                  T·∫•t c·∫£ d·ªØ li·ªáu chu k√¨ kinh nguy·ªát c·ªßa b·∫°n ƒë∆∞·ª£c m√£ h√≥a v√† l∆∞u tr·ªØ an to√†n tr√™n thi·∫øt b·ªã. 
                  Ch√∫ng t√¥i kh√¥ng chia s·∫ª th√¥ng tin c√° nh√¢n v·ªõi b√™n th·ª© ba.
                </p>
              </div>

              <div className="p-4 bg-gradient-to-br from-blue-50 to-indigo-50 rounded-xl border border-blue-200">
                <div className="flex items-center gap-3 mb-3">
                  <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                    <span className="text-blue-600 text-xl">
                    <FaChartBar />
                  </span>
                  </div>
                  <h4 className="font-semibold text-blue-800">S·ª≠ d·ª•ng d·ªØ li·ªáu</h4>
                </div>
                <p className="text-sm text-blue-700">
                  D·ªØ li·ªáu c·ªßa b·∫°n ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t√≠nh to√°n chu k√¨, cung c·∫•p d·ª± ƒëo√°n v√† th·ªëng k√™ s·ª©c kh·ªèe c√° nh√¢n.
                </p>
              </div>
            </div>

            {/* Features Overview */}
            <div className="p-4 bg-gradient-to-r from-gray-50 to-slate-50 rounded-xl border border-gray-200">
              <h4 className="font-semibold text-gray-800 mb-3">
                <FaLightbulb className="inline mr-2" />
                D·ªØ li·ªáu ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ:
              </h4>
              <div className="grid sm:grid-cols-2 gap-3">
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-pink-500 rounded-full"></div>
                  <span className="text-sm text-gray-700">T√≠nh to√°n v√† d·ª± ƒëo√°n chu k√¨ kinh nguy·ªát</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                  <span className="text-sm text-gray-700">Cung c·∫•p th·ªëng k√™ s·ª©c kh·ªèe sinh s·∫£n</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-indigo-500 rounded-full"></div>
                  <span className="text-sm text-gray-700">G·ª≠i th√¥ng b√°o nh·∫Øc nh·ªü (n·∫øu ƒë∆∞·ª£c b·∫≠t)</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                  <span className="text-sm text-gray-700">C·∫£i thi·ªán ƒë·ªô ch√≠nh x√°c c·ªßa d·ª± ƒëo√°n</span>
                </div>
              </div>
            </div>

            {/* Important Notice */}
            <div className="p-4 bg-gradient-to-br from-amber-50 to-orange-50 rounded-xl border border-amber-200">
              <div className="flex items-start gap-3">
                <div className="w-8 h-8 bg-amber-100 rounded-lg flex items-center justify-center flex-shrink-0 mt-1">
                  <span className="text-amber-600 text-lg">
                    <FaExclamationTriangle />
                  </span>
                </div>
                <div>
                  <h4 className="font-semibold text-amber-800 mb-2">L∆∞u √Ω quan tr·ªçng</h4>
                  <p className="text-sm text-amber-700 leading-relaxed">
                    GenCare l√† ·ª©ng d·ª•ng h·ªó tr·ª£ theo d√µi chu k√¨ kinh nguy·ªát v√† ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o. 
                    ·ª®ng d·ª•ng kh√¥ng thay th·∫ø cho √Ω ki·∫øn chuy√™n m√¥n c·ªßa b√°c sƒ©. H√£y tham kh·∫£o √Ω ki·∫øn b√°c sƒ© ph·ª• khoa 
                    n·∫øu c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o v·ªÅ s·ª©c kh·ªèe sinh s·∫£n c·ªßa b·∫°n.
                  </p>
                </div>
              </div>
            </div>

            {/* Information Cards */}
            <div className="grid sm:grid-cols-3 gap-4">
              <div className="text-center p-4 bg-gradient-to-b from-pink-50 to-rose-50 rounded-xl border border-pink-200">
                <div className="w-12 h-12 bg-pink-100 rounded-full flex items-center justify-center mx-auto mb-3">
                  <span className="text-pink-600 text-xl">üîê</span>
                </div>
                <h5 className="font-semibold text-pink-800 mb-2">Ri√™ng t∆∞ 100%</h5>
                <p className="text-xs text-pink-700">D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u tr·ªØ c·ª•c b·ªô v√† ƒë∆∞·ª£c m√£ h√≥a</p>
              </div>

              <div className="text-center p-4 bg-gradient-to-b from-purple-50 to-indigo-50 rounded-xl border border-purple-200">
                <div className="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-3">
                  <span className="text-purple-600 text-xl">
                    <FaBullseye />
                  </span>
                </div>
                <h5 className="font-semibold text-purple-800 mb-2">D·ª± ƒëo√°n ch√≠nh x√°c</h5>
                <p className="text-xs text-purple-700">Thu·∫≠t to√°n h·ªçc m√°y c·∫£i thi·ªán theo th·ªùi gian</p>
              </div>

              <div className="text-center p-4 bg-gradient-to-b from-blue-50 to-indigo-50 rounded-xl border border-blue-200">
                <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-3">
                  <span className="text-blue-600 text-xl">üì±</span>
                </div>
                <h5 className="font-semibold text-blue-800 mb-2">D·ªÖ s·ª≠ d·ª•ng</h5>
                <p className="text-xs text-blue-700">Giao di·ªán th√¢n thi·ªán v√† tr·ª±c quan</p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default NotificationSettings; 