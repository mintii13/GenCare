import React, { useState, useEffect } from 'react';
import { X, Edit, Save, Trash2, Calendar, Heart, Zap, AlertTriangle, FileText } from 'lucide-react';
import { DailyMoodData, menstrualCycleService } from '../../services/menstrualCycleService';
import { useAuth } from '../../contexts/AuthContext';
import toast from 'react-hot-toast';

interface MoodDataModalProps {
  isOpen: boolean;
  onClose: () => void;
  date: string;
  existingMoodData?: DailyMoodData;
  onSave?: () => void;
  forceEditMode?: boolean;
}

const MoodDataModal: React.FC<MoodDataModalProps> = ({
  isOpen,
  onClose,
  date,
  existingMoodData,
  onSave,
  forceEditMode = false
}) => {
  const { user } = useAuth();
  const [isEditing, setIsEditing] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [loading, setLoading] = useState(false);
  
  // Form state
  const [formData, setFormData] = useState<DailyMoodData>({
    mood: 'neutral',
    energy: 'medium',
    symptoms: [],
    notes: ''
  });

  // Initialize form data when modal opens
  useEffect(() => {
    if (isOpen) {
      if (forceEditMode || !existingMoodData || existingMoodData.mood === 'neutral') {
        // Force edit mode or no existing data, show in edit mode
        setFormData({
          mood: 'neutral',
          energy: 'medium',
          symptoms: [],
          notes: ''
        });
        setIsEditing(true);
      } else {
        // If there's existing mood data with actual values, show in view mode
        setFormData(existingMoodData);
        setIsEditing(false);
      }
    }
  }, [isOpen, existingMoodData, forceEditMode]);

  const updateFormData = (field: keyof DailyMoodData, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSave = async () => {
    if (!date || !user?.id) {
      toast.error('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá');
      return;
    }

    setLoading(true);
    try {
      let response;
      
      // If no existing mood data, create new period day
      if (!existingMoodData || existingMoodData.mood === 'neutral') {
        response = await menstrualCycleService.createPeriodDayWithMood(date, formData);
      } else {
        // Update existing period day
        response = await menstrualCycleService.updatePeriodDayMood(date, formData);
      }
      
      if (response.success) {
        toast.success('L∆∞u c·∫£m x√∫c th√†nh c√¥ng!');
        setIsEditing(false);
        onSave?.();
        if (!existingMoodData) {
          onClose();
        }
      } else {
        toast.error(response.message || 'L·ªói khi l∆∞u c·∫£m x√∫c');
      }
    } catch (error: any) {
      console.error('L·ªói khi l∆∞u c·∫£m x√∫c:', error);
      toast.error('L·ªói khi l∆∞u c·∫£m x√∫c: ' + (error.message || 'Kh√¥ng x√°c ƒë·ªãnh'));
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async () => {
    if (!date || !user?.id) {
      toast.error('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá');
      return;
    }

    setLoading(true);
    try {
      // Reset mood data to default
      const defaultMoodData: DailyMoodData = {
        mood: 'neutral',
        energy: 'medium',
        symptoms: [],
        notes: ''
      };
      
      const response = await menstrualCycleService.updatePeriodDayMood(date, defaultMoodData);
      
      if (response.success) {
        toast.success('ƒê√£ x√≥a d·ªØ li·ªáu c·∫£m x√∫c');
        onSave?.();
        onClose();
      } else {
        toast.error(response.message || 'L·ªói khi x√≥a d·ªØ li·ªáu');
      }
    } catch (error: any) {
      console.error('L·ªói khi x√≥a d·ªØ li·ªáu:', error);
      toast.error('L·ªói khi x√≥a d·ªØ li·ªáu: ' + (error.message || 'Kh√¥ng x√°c ƒë·ªãnh'));
    } finally {
      setLoading(false);
      setShowDeleteConfirm(false);
    }
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('vi-VN', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  const moodOptions = [
    { value: 'happy', label: 'Vui v·∫ª', emoji: 'üòä' },
    { value: 'excited', label: 'H√†o h·ª©ng', emoji: 'ü§©' },
    { value: 'calm', label: 'B√¨nh tƒ©nh', emoji: 'üòå' },
    { value: 'tired', label: 'M·ªát m·ªèi', emoji: 'üò¥' },
    { value: 'stressed', label: 'CƒÉng th·∫≥ng', emoji: 'üò∞' },
    { value: 'sad', label: 'Bu·ªìn', emoji: 'üò¢' },
    { value: 'neutral', label: 'B√¨nh th∆∞·ªùng', emoji: 'üòê' }
  ];

  const energyOptions = [
    { value: 'high', label: 'Cao', color: 'text-green-600' },
    { value: 'medium', label: 'Trung b√¨nh', color: 'text-yellow-600' },
    { value: 'low', label: 'Th·∫•p', color: 'text-red-600' }
  ];

  const symptomOptions = [
    'ƒêau b·ª•ng', 'ƒêau l∆∞ng', 'ƒêau ƒë·∫ßu', 'M·ªát m·ªèi', 'Chu·ªôt r√∫t',
    'ƒê·∫ßy h∆°i', 'Bu·ªìn n√¥n', 'Ch√≥ng m·∫∑t', 'N√≥ng b·ª´ng', 'ƒê·ªï m·ªì h√¥i',
    'Kh√≥ ng·ªß', 'Thay ƒë·ªïi t√¢m tr·∫°ng', 'Th√®m ƒÉn', 'S∆∞ng ng·ª±c'
  ];

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div className="flex items-center space-x-3">
            <Calendar className="w-6 h-6 text-pink-500" />
            <div>
              <h2 className="text-xl font-bold text-gray-800">
                {existingMoodData ? 'Chi ti·∫øt c·∫£m x√∫c' : 'Th√™m c·∫£m x√∫c m·ªõi'}
              </h2>
              <p className="text-sm text-gray-600">{formatDate(date)}</p>
            </div>
          </div>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-full transition-colors"
          >
            <X className="w-5 h-5 text-gray-500" />
          </button>
        </div>

        {/* Content */}
        <div className="p-6 space-y-6">
          {/* Mood Selection */}
          <div>
            <label className="flex items-center space-x-2 text-sm font-medium text-gray-700 mb-3">
              <Heart className="w-4 h-4 text-pink-500" />
              <span>T√¢m tr·∫°ng</span>
            </label>
            {isEditing ? (
              <div className="grid grid-cols-4 gap-3">
                {moodOptions.map(option => (
                  <button
                    key={option.value}
                    onClick={() => updateFormData('mood', option.value)}
                    className={`p-3 rounded-lg border-2 transition-all ${
                      formData.mood === option.value
                        ? 'border-pink-500 bg-pink-50'
                        : 'border-gray-200 hover:border-pink-300'
                    }`}
                  >
                    <div className="text-2xl mb-1">{option.emoji}</div>
                    <div className="text-xs font-medium">{option.label}</div>
                  </button>
                ))}
              </div>
            ) : (
              <div className="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg">
                {formData.mood ? (
                  <>
                    <span className="text-2xl">
                      {moodOptions.find(opt => opt.value === formData.mood)?.emoji}
                    </span>
                    <span className="font-medium">
                      {moodOptions.find(opt => opt.value === formData.mood)?.label}
                    </span>
                  </>
                ) : (
                  <span className="text-gray-500">Ch∆∞a c√≥ d·ªØ li·ªáu</span>
                )}
              </div>
            )}
          </div>

          {/* Energy Level */}
          <div>
            <label className="flex items-center space-x-2 text-sm font-medium text-gray-700 mb-3">
              <Zap className="w-4 h-4 text-yellow-500" />
              <span>M·ª©c nƒÉng l∆∞·ª£ng</span>
            </label>
            {isEditing ? (
              <div className="grid grid-cols-3 gap-3">
                {energyOptions.map(option => (
                  <button
                    key={option.value}
                    onClick={() => updateFormData('energy', option.value)}
                    className={`p-3 rounded-lg border-2 transition-all ${
                      formData.energy === option.value
                        ? 'border-yellow-500 bg-yellow-50'
                        : 'border-gray-200 hover:border-yellow-300'
                    }`}
                  >
                    <div className={`text-lg font-medium ${option.color}`}>
                      {option.label}
                    </div>
                  </button>
                ))}
              </div>
            ) : (
              <div className="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg">
                <span className="font-medium">
                  {energyOptions.find(opt => opt.value === formData.energy)?.label || 'Trung b√¨nh'}
                </span>
              </div>
            )}
          </div>

          {/* Symptoms */}
          <div>
            <label className="flex items-center space-x-2 text-sm font-medium text-gray-700 mb-3">
              <AlertTriangle className="w-4 h-4 text-orange-500" />
              <span>Tri·ªáu ch·ª©ng</span>
            </label>
            {isEditing ? (
              <div className="space-y-2">
                <div className="grid grid-cols-2 gap-2">
                  {symptomOptions.map(symptom => (
                    <label key={symptom} className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        checked={formData.symptoms.includes(symptom)}
                        onChange={(e) => {
                          if (e.target.checked) {
                            updateFormData('symptoms', [...formData.symptoms, symptom]);
                          } else {
                            updateFormData('symptoms', formData.symptoms.filter(s => s !== symptom));
                          }
                        }}
                        className="rounded border-gray-300 text-pink-500 focus:ring-pink-500"
                      />
                      <span className="text-sm">{symptom}</span>
                    </label>
                  ))}
                </div>
              </div>
            ) : (
              <div className="p-3 bg-gray-50 rounded-lg">
                {formData.symptoms.length > 0 ? (
                  <div className="flex flex-wrap gap-1">
                    {formData.symptoms.map(symptom => (
                      <span key={symptom} className="px-2 py-1 bg-orange-100 text-orange-800 text-xs rounded">
                        {symptom}
                      </span>
                    ))}
                  </div>
                ) : (
                  <span className="text-gray-500">Kh√¥ng c√≥ tri·ªáu ch·ª©ng</span>
                )}
              </div>
            )}
          </div>

          {/* Notes */}
          <div>
            <label className="flex items-center space-x-2 text-sm font-medium text-gray-700 mb-3">
              <FileText className="w-4 h-4 text-blue-500" />
              <span>Ghi ch√∫</span>
            </label>
            {isEditing ? (
              <textarea
                value={formData.notes || ''}
                onChange={(e) => updateFormData('notes', e.target.value)}
                placeholder="Ghi ch√∫ v·ªÅ c·∫£m x√∫c ho·∫∑c tri·ªáu ch·ª©ng..."
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                rows={3}
              />
            ) : (
              <div className="p-3 bg-gray-50 rounded-lg">
                {formData.notes ? (
                  <p className="text-sm">{formData.notes}</p>
                ) : (
                  <span className="text-gray-500">Kh√¥ng c√≥ ghi ch√∫</span>
                )}
              </div>
            )}
          </div>
        </div>

        {/* Footer */}
        <div className="flex items-center justify-between p-6 border-t border-gray-200">
          <div className="flex space-x-3">
            {existingMoodData && (
              <>
                {!isEditing ? (
                  <button
                    onClick={() => setIsEditing(true)}
                    className="flex items-center space-x-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
                  >
                    <Edit className="w-4 h-4" />
                    <span>Ch·ªânh s·ª≠a</span>
                  </button>
                ) : (
                  <button
                    onClick={() => {
                      setIsEditing(false);
                      setFormData(existingMoodData);
                    }}
                    className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors"
                  >
                    H·ªßy
                  </button>
                )}
                <button
                  onClick={() => setShowDeleteConfirm(true)}
                  className="flex items-center space-x-2 px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors"
                >
                  <Trash2 className="w-4 h-4" />
                  <span>X√≥a</span>
                </button>
              </>
            )}
          </div>
          <div className="flex space-x-3">
            <button
              onClick={onClose}
              className="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors"
            >
              ƒê√≥ng
            </button>
            {isEditing && (
              <button
                onClick={handleSave}
                disabled={loading}
                className="flex items-center space-x-2 px-4 py-2 bg-pink-500 text-white rounded-lg hover:bg-pink-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {loading ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                    <span>ƒêang l∆∞u...</span>
                  </>
                ) : (
                  <>
                    <Save className="w-4 h-4" />
                    <span>L∆∞u</span>
                  </>
                )}
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Delete Confirmation Modal */}
      {showDeleteConfirm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60">
          <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <h3 className="text-lg font-bold text-gray-800 mb-4">X√°c nh·∫≠n x√≥a</h3>
            <p className="text-gray-600 mb-6">
              B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a d·ªØ li·ªáu c·∫£m x√∫c cho ng√†y {formatDate(date)} kh√¥ng?
            </p>
            <div className="flex space-x-3">
              <button
                onClick={() => setShowDeleteConfirm(false)}
                className="flex-1 px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors"
              >
                H·ªßy
              </button>
              <button
                onClick={handleDelete}
                disabled={loading}
                className="flex-1 px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {loading ? 'ƒêang x√≥a...' : 'X√≥a'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default MoodDataModal; 