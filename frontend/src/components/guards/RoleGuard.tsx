import React, { useState, useEffect } from 'react';
import { useAuth } from '../../contexts/AuthContext';
import { FaExclamationTriangle, FaHome } from 'react-icons/fa';
import LoginModal from '../auth/LoginModal';
import toast from 'react-hot-toast';

interface RoleGuardProps {
  allowedRoles: string[];
  children: React.ReactNode;
  redirectTo?: string;
  showError?: boolean;
}

const RoleGuard: React.FC<RoleGuardProps> = ({
  allowedRoles,
  children,
  redirectTo = '/',
  showError = false
}) => {
  const { user, isAuthenticated, isLoading } = useAuth();
  const [showLoginModal, setShowLoginModal] = useState(false);
  const [toastShown, setToastShown] = useState(false);
  const [showErrorPage, setShowErrorPage] = useState(false);

  useEffect(() => {
    if (!isAuthenticated && !toastShown && !isLoading) {
      setShowLoginModal(true);
      toast.dismiss();
      toast.error('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y!');
      setToastShown(true);
    }
  }, [isAuthenticated, toastShown, isLoading]);

  useEffect(() => {
    console.log('üõ°Ô∏è RoleGuard: Checking access', { 
      userRole: user?.role, 
      allowedRoles, 
      isAuthenticated, 
      isLoading 
    });
    
    if (!isLoading && isAuthenticated && user?.role && !allowedRoles.includes(user.role)) {
      const timer = setTimeout(() => {
        console.log('‚ùå RoleGuard: Showing error page after delay');
        setShowErrorPage(true);
      }, 1000); // TƒÉng delay l√™n 1000ms
      
      return () => clearTimeout(timer);
    } else {
      console.log('‚úÖ RoleGuard: Access granted or still loading');
      setShowErrorPage(false);
    }
  }, [user?.role, allowedRoles, isAuthenticated, isLoading]);

  // Reset toastShown khi modal ƒë√≥ng ho·∫∑c ƒëƒÉng nh·∫≠p th√†nh c√¥ng
  const handleCloseModal = () => {
    setShowLoginModal(false);
    setToastShown(false);
    // Redirect v·ªÅ homepage khi user ƒë√≥ng modal (kh√¥ng mu·ªën ƒëƒÉng nh·∫≠p)
    window.location.href = '/';
  };
  const handleLoginSuccess = () => {
    setShowLoginModal(false);
    setToastShown(false);
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return (
      <>
        <LoginModal isOpen={showLoginModal} onClose={handleCloseModal} onSuccess={handleLoginSuccess} />
      </>
    );
  }

  // Ch·ªâ hi·ªÉn th·ªã error khi ƒë√£ load xong v√† ch·∫Øc ch·∫Øn user kh√¥ng c√≥ quy·ªÅn
  if (!isLoading && isAuthenticated && user?.role && !allowedRoles.includes(user.role)) {
    if (showError && showErrorPage) {
      return (
        <div className="min-h-screen flex items-center justify-center bg-gray-50">
          <div className="max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center">
            <FaExclamationTriangle className="mx-auto h-12 w-12 text-red-500 mb-4" />
            <h1 className="text-2xl font-bold text-gray-900 mb-2">Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p</h1>
            <p className="text-gray-600 mb-6">
              <p>B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o trang n√†y!</p>
              {user?.role === 'consultant' && ' Chuy√™n gia kh√¥ng c√≥ t√≠nh nƒÉng n√†y.'}
              {user?.role === 'customer' && ' Kh√°ch h√†ng kh√¥ng c√≥ t√≠nh nƒÉng n√†y.'}
              {user?.role === 'staff' && ' Nh√¢n vi√™n kh√¥ng c√≥ t√≠nh nƒÉng n√†y.'}
              {user?.role === 'admin' && ' B·∫°n c·∫ßn quy·ªÅn truy c·∫≠p kh√°c.'}
            </p>
            <button
              onClick={() => window.location.href = '/'}
              className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
            >
              <FaHome className="mr-2" />
              V·ªÅ trang ch·ªß
            </button>
          </div>
        </div>
      );
    }
    
    // Hi·ªÉn th·ªã loading trong khi ch·ªù
    if (showError && !showErrorPage) {
      return (
        <div className="flex items-center justify-center min-h-screen">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500"></div>
        </div>
      );
    }
    
    return null;
  }

  // Cho ph√©p truy c·∫≠p n·∫øu ƒëang loading, ch∆∞a authenticated, ho·∫∑c c√≥ quy·ªÅn
  return <>{children}</>;
};

export default RoleGuard;