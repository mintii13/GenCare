import axios from 'axios';

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3000/api';
const API_TIMEOUT = Number(import.meta.env.VITE_API_TIMEOUT) || 5000;
const AUTH_TOKEN_KEY = import.meta.env.VITE_AUTH_TOKEN_KEY || 'accessToken';

// T·∫°o instance axios v·ªõi base URL c·ªßa backend
const api = axios.create({
  baseURL: API_URL,
  timeout: API_TIMEOUT,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Debug log ƒë·ªÉ ki·ªÉm tra c·∫•u h√¨nh
console.log('üîß API Configuration:', {
  API_URL,
  API_TIMEOUT,
  AUTH_TOKEN_KEY
});

// Th√™m interceptor ƒë·ªÉ t·ª± ƒë·ªông th√™m token v√†o header
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem(AUTH_TOKEN_KEY);
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Add response interceptor
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    // N·∫øu mu·ªën x·ª≠ l√Ω l·ªói 401, ch·ªâ c·∫ßn logout ho·∫∑c chuy·ªÉn h∆∞·ªõng, kh√¥ng c·∫ßn refresh token
    if (error.response?.status === 401) {
      // X√≥a t·∫•t c·∫£ auth data
      localStorage.removeItem(AUTH_TOKEN_KEY);
      localStorage.removeItem('accessToken');
      localStorage.removeItem('user');
      
      // Redirect v·ªÅ trang ch·ªß thay v√¨ login
      window.location.href = '/';
      return Promise.reject(error);
    }
    return Promise.reject(error);
  }
);

export default api; 